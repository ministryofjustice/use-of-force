/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/queue-admin/retry-dlq/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['retryDlq']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/retry-all-dlqs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['retryAllDlqs']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/purge-queue/{queueName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['purgeQueue']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prison-configuration/{prisonId}/resi-service/{status}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update the status of the service service for a prison
     * @description Requires role LOCATION_ADMIN
     */
    put: operations['updateResiLocationServiceActiveStatus']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prison-configuration/{prisonId}/certification-approval-required/{approvalProcessStatus}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update the certification approval process for a prison
     * @description Requires role LOCATION_ADMIN
     */
    put: operations['updateCertificationApprovalProcessForPrison']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/{id}/used-for-type': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update Used For types at cell location below the specified location
     * @description Requires role MAINTAIN_LOCATIONS and write scope
     */
    put: operations['updateUsedForType']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/{id}/update/temporary-deactivation': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update the details of the deactivation of a location
     * @description Requires role MAINTAIN_LOCATIONS and write scope
     */
    put: operations['updateDeactivateDetails']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/{id}/update-non-res-cell': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Updates a non res cell type
     * @description Requires role MAINTAIN_LOCATIONS and write scope
     */
    put: operations['updateNonResidentialCellType']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/{id}/specialist-cell-types': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update specialist cell types for a cell
     * @description Requires role MAINTAIN_LOCATIONS and write scope
     */
    put: operations['updateSpecialistCellTypes']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/{id}/reactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Re-activate a location
     * @deprecated
     * @description Requires role MAINTAIN_LOCATIONS and write scope
     */
    put: operations['reactivateLocation']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/{id}/deactivate/temporary': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Temporarily deactivate a location
     * @description Requires role MAINTAIN_LOCATIONS and write scope
     */
    put: operations['temporarilyDeactivateLocation']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/{id}/deactivate/permanent': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Permanently deactivate a location
     * @description Requires role MAINTAIN_LOCATIONS and write scope
     */
    put: operations['permanentlyDeactivateLocation']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/{id}/convert-to-cell': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Makes a non-res cell location a cell
     * @description Requires role MAINTAIN_LOCATIONS and write scope
     */
    put: operations['convertToCellLocation']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/{id}/convert-cell-to-non-res-cell': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Converts a cell to a non res cell location
     * @description Requires role MAINTAIN_LOCATIONS and write scope
     */
    put: operations['convertCellToNonResidentialLocation']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/{id}/change-local-name': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update local name details of a location
     * @description Requires role MAINTAIN_LOCATIONS and write scope
     */
    put: operations['updateLocalName']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/{id}/capacity': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Set the capacity of a cell
     * @description Requires role MAINTAIN_LOCATIONS and write scope
     */
    put: operations['changeCapacity']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/bulk/reactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Re-activates a series of locations
     * @description Requires role MAINTAIN_LOCATIONS and write scope
     */
    put: operations['bulkReactivateLocations']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/bulk/deactivate/temporary': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Bulk temporarily deactivate a location
     * @description Requires role MAINTAIN_LOCATIONS and write scope
     */
    put: operations['bulkDeactivateLocations']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/bulk/deactivate/permanent': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Bulk permanently deactivate a location, the location must already be temporarily deactivated
     * @description Requires role MAINTAIN_LOCATIONS and write scope
     */
    put: operations['bulkPermanentlyDeactivateLocations']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/bulk/capacity-update': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update capacity in map of cell locations
     * @description Requires role MAINTAIN_LOCATIONS and write scope
     */
    put: operations['bulkUpdateCapacity']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/upsert': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Upsert of a location
     * @description Requires role SYNC_LOCATIONS and write scope
     */
    post: operations['upsertLocation']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/signed-op-cap/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create or update the signed operation capacity
     * @description Requires role ROLE_MAINTAIN_LOCATIONS
     */
    post: operations['updateSignedOperationCapacity']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/residential': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a residential location
     * @description Requires role MAINTAIN_LOCATIONS and write scope
     */
    post: operations['createResidentialLocation']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/non-residential': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a non-residential location
     * @description Requires role MAINTAIN_LOCATIONS and write scope
     */
    post: operations['createNonResidentialLocation']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/keys': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Gets locations by their keys
     * @description Requires role VIEW_LOCATIONS
     */
    post: operations['getLocationsByKeys']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/create-wing': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a residential wing with landings and cells
     * @description Requires role MAINTAIN_LOCATIONS and write scope
     */
    post: operations['createWing']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/residential/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Partial update of a location
     * @description Requires role MAINTAIN_LOCATIONS and write scope
     */
    patch: operations['patchResidentialLocation']
    trace?: never
  }
  '/locations/residential/key/{key}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Partial update of a location by key
     * @description Requires role MAINTAIN_LOCATIONS and write scope
     */
    patch: operations['patchResidentialLocationByKey']
    trace?: never
  }
  '/locations/non-residential/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Partial update of a non-residential location
     * @description Requires role MAINTAIN_LOCATIONS and write scope
     */
    patch: operations['patchNonResidentialLocation']
    trace?: never
  }
  '/locations/non-residential/key/{key}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Partial update of a non-residential location
     * @description Requires role MAINTAIN_LOCATIONS and write scope
     */
    patch: operations['patchNonResidentialLocationByKey']
    trace?: never
  }
  '/transactions/{txId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns transaction history information for this transaction ID
     * @description Requires role VIEW_LOCATIONS
     */
    get: operations['getTransaction']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/id/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns location information for this ID in Legacy NOMIS format
     * @description Requires role VIEW_LOCATIONS
     */
    get: operations['getLocation']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/signed-op-cap/{prisonId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Signed Operation Capacity
     * @description Requires role VIEW_LOCATIONS
     */
    get: operations['getSignedOperationCapacity']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/reports/{reportId}/{reportVariantId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Returns the dataset for the given report ID and report variant ID filtered by the filters provided in the query. */
    get: operations['configuredApiDataset']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/reports/{reportId}/{reportVariantId}/{fieldId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Returns the dataset for the given report ID and report variant ID filtered by the filters provided in the query. */
    get: operations['configuredApiDynamicFilter']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/reports/{reportId}/{reportVariantId}/count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Returns the number of records for the given report ID and report variant ID filtered by the filters provided in the query. */
    get: operations['configuredApiCount']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getDlqMessages']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner-locations/prison/{prisonId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns a map of prisoners in cells within this prison
     * @description Requires role VIEW_PRISONER_LOCATIONS
     */
    get: operations['getPrisonersInLocationByPrison']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner-locations/key/{key}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns a map of prisoners in cells within this location
     * @description Requires role VIEW_PRISONER_LOCATIONS
     */
    get: operations['getPrisonersInLocationByKey']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner-locations/id/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns a map of prisoners in cells within this location
     * @description Requires role VIEW_PRISONER_LOCATIONS
     */
    get: operations['getPrisonersInLocationById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prison/roll-count/{prisonId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Roll count for a specific prison
     * @description Requires role ESTABLISHMENT_ROLL
     */
    get: operations['getPrisonRollCount']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prison/roll-count/{prisonId}/cells-only/{locationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Provides the list of cells with roll counts under a specified location provided
     * @description Requires role ESTABLISHMENT_ROLL or agency in caseload.
     */
    get: operations['getCellLevelRollCount']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prison-configuration/{prisonId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get prison configuration
     * @description Requires role LOCATION_ADMIN
     */
    get: operations['getPrisonConfiguration']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get locations, filtered and paged
     * @description Requires VIEW_LOCATIONS role, max of 200 records per request
     */
    get: operations['getLocations']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/{prisonId}/local-name/{localName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Finds a location matching the local name for a given prison
     * @description Requires role VIEW_LOCATIONS
     */
    get: operations['findLocationByLocalName']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns location information for this ID
     * @description Requires role VIEW_LOCATIONS
     */
    get: operations['getLocation_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/{id}/attributes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get attributes for a cell
     * @description Requires VIEW_LOCATIONS role, attributes will either be specialist cell types or legacy attributes
     */
    get: operations['getCellAttributes']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/residential-summary/{prisonId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Return locations for this prison below the parent location, is not provided - top level (w.g. WINGS)
     * @description Requires role VIEW_LOCATIONS
     */
    get: operations['getLocationForPrisonBelowParent']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/prison/{prisonId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Return locations for this prison
     * @description Requires role VIEW_LOCATIONS
     */
    get: operations['getLocationForPrison']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/prison/{prisonId}/residential-hierarchy': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Return the entire hierarchy for this prison
     * @description Requires role VIEW_LOCATIONS
     */
    get: operations['getPrisonHierarchy']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/prison/{prisonId}/residential-first-level': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Return the entire hierarchy for this prison
     * @description Requires role VIEW_LOCATIONS
     */
    get: operations['getTopLevelResidentialLocations']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/prison/{prisonId}/non-residential': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a list of active non-residential locations for a prison (excluding RTU)
     * @description Requires role VIEW_LOCATIONS
     */
    get: operations['getNonResidentialLocationsForPrison']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/prison/{prisonId}/non-residential-usage-type': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Return non-residential locations by usage for this prison
     * @description Requires role VIEW_LOCATIONS
     */
    get: operations['getLocationsByPrisonWithUsageTypes']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/prison/{prisonId}/non-residential-usage-type/{usageType}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Return non-residential locations by usage for this prison
     * @description Requires role VIEW_LOCATIONS
     */
    get: operations['getLocationsByPrisonAndNonResidentialUsageType']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/prison/{prisonId}/location-type/{locationType}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Return locations by their type for this prison
     * @description Requires role VIEW_LOCATIONS
     */
    get: operations['getLocationsByPrisonAndLocationType']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/prison/{prisonId}/inactive-cells': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Return residential inactive cells for this prison
     * @description Requires role VIEW_LOCATIONS
     */
    get: operations['getInactiveLocationsForPrison']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/prison/{prisonId}/groups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Return location groups for this prison
     * @description Requires role VIEW_LOCATIONS
     */
    get: operations['getLocationGroupsForPrison']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/prison/{prisonId}/group/{group}/location-prefix': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get location prefix by group.
     * @description Requires role VIEW_LOCATIONS
     */
    get: operations['getLocationPrefixFromGroup']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/prison/{prisonId}/archived': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Return residential archived locations for this prison
     * @description Requires role VIEW_LOCATIONS
     */
    get: operations['getArchivedLocationForPrison']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/key/{key}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns location information for this key
     * @description Requires role VIEW_LOCATIONS
     */
    get: operations['getLocationByKey']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/groups/{prisonId}/{name}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of cell locations by group at prison location.
     * @description Requires role VIEW_LOCATIONS
     */
    get: operations['getLocationGroup']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/location-occupancy/cells-with-capacity/{prisonId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of cells by group at prison which have capacity.
     * @description Requires role VIEW_LOCATIONS
     */
    get: operations['getCellsWithCapacity']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/definitions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Gets summaries of all report definitions */
    get: operations['definitions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/definitions/{reportId}/{variantId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Gets report definition containing a single variant. */
    get: operations['definition']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/definitions/{dataProductDefinitionId}/dashboards/{dashboardId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Gets the metric dashboard definition. */
    get: operations['dashboardDefinition']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/constants/used-for-type': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all used for types
     * @description Requires the READ_LOCATION_REFERENCE_DATA role.
     */
    get: operations['getUsedForTypeConstants']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/constants/used-for-type/{prisonId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get used for type data for not female or secure estate
     * @description Requires the READ_LOCATION_REFERENCE_DATA role.
     */
    get: operations['getUsedForTypeConstantsForSpecifiedPrison']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/constants/specialist-cell-type': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get specialist cell type data
     * @description Requires the READ_LOCATION_REFERENCE_DATA role.
     */
    get: operations['getSpecialistCellTypeConstants']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/constants/residential-housing-type': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get residential housing reference data
     * @description Requires the READ_LOCATION_REFERENCE_DATA role.
     */
    get: operations['locationAttributeConstants']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/constants/residential-attribute-type': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get residential attribute reference data
     * @description Requires the READ_LOCATION_REFERENCE_DATA role.
     */
    get: operations['residentialAttributeTypeConstants']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/constants/non-residential-usage-type': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get non-residential usage reference data
     * @description Requires the READ_LOCATION_REFERENCE_DATA role.
     */
    get: operations['nonResidentialUsageTypeConstants']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/constants/location-type': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get location reference data
     * @description Requires the READ_LOCATION_REFERENCE_DATA role.
     */
    get: operations['locationConstants']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/constants/deactivated-reason': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get deactivated reason reference data
     * @description Requires the READ_LOCATION_REFERENCE_DATA role.
     */
    get: operations['deactivedReasonsConstants']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/constants/converted-cell-type': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get converted cell type data
     * @description Requires the READ_LOCATION_REFERENCE_DATA role.
     */
    get: operations['getConvertedCellType']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/constants/accommodation-type': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get accommodation type data
     * @description Requires the READ_LOCATION_REFERENCE_DATA role.
     */
    get: operations['getAccommodationTypeConstants']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/delete/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Delete a location
     * @description Requires role SYNC_LOCATIONS and write scope
     */
    delete: operations['deleteLocation']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** @description Error response */
    ErrorResponse: {
      /**
       * Format: int32
       * @description HTTP status code
       * @example 500
       */
      status: number
      /**
       * @description User message for the error
       * @example No location found for ID `de91dfa7-821f-4552-a427-bf2f32eafeb0`
       */
      userMessage: string
      /**
       * @description More detailed error message
       * @example [Details, sometimes a stack trace]
       */
      developerMessage: string
      /**
       * Format: int32
       * @description When present, uniquely identifies the type of error making it easier for clients to discriminate without relying on error description or HTTP status code; see `uk.gov.justice.digital.hmpps.locationsinsideprison.resources.ErrorCode` enumeration in hmpps-locations-inside-prison-api
       * @example 101
       */
      errorCode?: number
      /**
       * @description More information about the error
       * @example [Rarely used, error-specific]
       */
      moreInfo?: string
    }
    RetryDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    /** @description Prison configuration */
    PrisonConfigurationDto: {
      /**
       * @description Prison ID
       * @example MDI
       */
      prisonId: string
      /**
       * @description Indicates that the residential service is active
       * @example true
       * @enum {string}
       */
      resiLocationServiceActive: 'ACTIVE' | 'INACTIVE'
      /**
       * @description Indicates that roll count should include segregation in its calculations for net vacancies
       * @example false
       * @enum {string}
       */
      includeSegregationInRollCount: 'ACTIVE' | 'INACTIVE'
      /**
       * @description Indicates that this prison must go through the certification process to create or change cells
       * @example false
       * @enum {string}
       */
      certificationApprovalRequired: 'ACTIVE' | 'INACTIVE'
    }
    /** @description Capacity */
    Capacity: {
      /**
       * Format: int32
       * @description Max capacity of the location
       * @example 2
       */
      maxCapacity: number
      /**
       * Format: int32
       * @description Working capacity of the location
       * @example 2
       */
      workingCapacity: number
    }
    /** @description Certification */
    Certification: {
      /**
       * @description Indicates that this location is certified for use as a residential location
       * @example true
       */
      certified: boolean
      /**
       * Format: int32
       * @description Indicates the capacity of the certified location (cell)
       * @example 1
       */
      capacityOfCertifiedCell: number
    }
    /** @description Change History */
    ChangeHistory: {
      /**
       * Format: uuid
       * @description Transaction ID
       * @example 019464e9-05da-77b3-810b-887e199d8190
       */
      transactionId?: string
      /**
       * @description Transaction type
       * @example CAPACITY_CHANGE
       * @enum {string}
       */
      transactionType?:
        | 'LOCATION_CREATE'
        | 'LOCATION_UPDATE'
        | 'SYNC'
        | 'DELETE'
        | 'CAPACITY_CHANGE'
        | 'CELL_TYPE_CHANGES'
        | 'DEACTIVATION'
        | 'PERMANENT_DEACTIVATION'
        | 'REACTIVATION'
        | 'CELL_CONVERTION_TO_ROOM'
        | 'ROOM_CONVERTION_TO_CELL'
        | 'SIGNED_OP_CAP'
        | 'RESI_SERVICE_ACTIVATION'
        | 'APPROVAL_PROCESS_ACTIVATION'
        | 'PENDING_CELL_CHANGE'
      /**
       * @description Location Attribute
       * @example Location Type
       */
      attribute: string
      /**
       * @description Previous values of this attribute
       * @example [
       *       "Dry cell",
       *       "Safe cell"
       *     ]
       */
      oldValues?: string[]
      /**
       * @description New values of this attribute
       * @example [
       *       "Dry cell",
       *       "Safe cell"
       *     ]
       */
      newValues?: string[]
      /**
       * @description User who made the change
       * @example user
       */
      amendedBy: string
      /**
       * Format: date-time
       * @description Date the change was made
       * @example 2023-01-23T10:15:30
       */
      amendedDate: string
    }
    /** @description Location Information */
    Location: {
      /**
       * Format: uuid
       * @description Location Id
       * @example 2475f250-434a-4257-afe7-b911f1773a4d
       */
      id: string
      /**
       * @description Prison ID
       * @example MDI
       */
      prisonId: string
      /**
       * @description Location Code
       * @example 001
       */
      code: string
      /**
       * @description Full path of the location within the prison
       * @example A-1-001
       */
      pathHierarchy: string
      /**
       * @description Location Type
       * @example CELL
       * @enum {string}
       */
      locationType:
        | 'WING'
        | 'SPUR'
        | 'LANDING'
        | 'CELL'
        | 'ROOM'
        | 'HOLDING_AREA'
        | 'MOVEMENT_AREA'
        | 'RESIDENTIAL_UNIT'
        | 'EXTERNAL_GROUNDS'
        | 'HOLDING_CELL'
        | 'MEDICAL'
        | 'GROUP'
        | 'OFFICE'
        | 'ADMINISTRATION_AREA'
        | 'BOOTH'
        | 'BOX'
        | 'RETURN_TO_UNIT'
        | 'CLASSROOM'
        | 'TRAINING_AREA'
        | 'TRAINING_ROOM'
        | 'EXERCISE_AREA'
        | 'AREA'
        | 'SPORTS'
        | 'WORKSHOP'
        | 'INSIDE_PARTY'
        | 'OUTSIDE_PARTY'
        | 'FAITH_AREA'
        | 'ADJUDICATION_ROOM'
        | 'APPOINTMENTS'
        | 'VISITS'
        | 'VIDEO_LINK'
        | 'ASSOCIATION'
        | 'INTERNAL_GROUNDS'
        | 'INTERVIEW'
        | 'LOCATION'
        | 'POSITION'
        | 'SHELF'
        | 'STORE'
        | 'TABLE'
      /**
       * @description Alternative description to display for location, (Not Cells)
       * @example Wing A
       */
      localName?: string
      /**
       * @description Additional comments that can be made about this location
       * @example Not to be used
       */
      comments?: string
      /**
       * @description Indicates if the location is permanently inactive
       * @example false
       */
      permanentlyInactive: boolean
      /**
       * @description Reason for permanently deactivating
       * @example Demolished
       */
      permanentlyInactiveReason?: string
      /** @description Capacity details of the location */
      capacity?: components['schemas']['Capacity']
      /**
       * Format: int32
       * @description When a cell is inactive, show the active working capacity value
       */
      oldWorkingCapacity?: number
      /** @description Indicates that this location is certified for use as a residential location */
      certification?: components['schemas']['Certification']
      /** @description Location Usage */
      usage?: components['schemas']['NonResidentialUsageDto'][]
      /** @description Accommodation Types */
      accommodationTypes?: (
        | 'CARE_AND_SEPARATION'
        | 'HEALTHCARE_INPATIENTS'
        | 'NORMAL_ACCOMMODATION'
        | 'OTHER_NON_RESIDENTIAL'
      )[]
      /** @description Specialist Cell Types */
      specialistCellTypes?: (
        | 'ACCESSIBLE_CELL'
        | 'BIOHAZARD_DIRTY_PROTEST'
        | 'CSU'
        | 'CAT_A'
        | 'CONSTANT_SUPERVISION'
        | 'DRY'
        | 'ESCAPE_LIST'
        | 'ISOLATION_DISEASES'
        | 'LISTENER_CRISIS'
        | 'LOCATE_FLAT_CELL'
        | 'MEDICAL'
        | 'MOTHER_AND_BABY'
        | 'SAFE_CELL'
        | 'UNFURNISHED'
      )[]
      /** @description Usage For */
      usedFor?: (
        | 'CLOSE_SUPERVISION_CENTRE'
        | 'SUB_MISUSE_DRUG_RECOVERY'
        | 'FIRST_NIGHT_CENTRE'
        | 'HIGH_SECURITY'
        | 'IPP_LONG_TERM_SENTENCES'
        | 'MOTHER_AND_BABY'
        | 'OPEN_UNIT'
        | 'PATHWAY_TO_PROG'
        | 'PERINATAL_UNIT'
        | 'PERSONALITY_DISORDER'
        | 'PIPE'
        | 'REMAND'
        | 'SEPARATION_CENTRE'
        | 'STANDARD_ACCOMMODATION'
        | 'THERAPEUTIC_COMMUNITY'
        | 'VULNERABLE_PRISONERS'
        | 'YOUNG_PERSONS'
      )[]
      /**
       * @description Status of the location
       * @example ACTIVE
       * @enum {string}
       */
      status:
        | 'ACTIVE'
        | 'INACTIVE'
        | 'ARCHIVED'
        | 'DRAFT'
        | 'NON_RESIDENTIAL'
        | 'LOCKED_ACTIVE'
        | 'LOCKED_INACTIVE'
        | 'LOCKED_DRAFT'
        | 'LOCKED_NON_RESIDENTIAL'
      /**
       * @description Location is locked
       * @example false
       */
      locked: boolean
      /**
       * @description Convert Cell Type
       * @enum {string}
       */
      convertedCellType?:
        | 'HOLDING_ROOM'
        | 'INTERVIEW_ROOM'
        | 'KITCHEN_SERVERY'
        | 'LISTENERS_ROOM'
        | 'OFFICE'
        | 'SHOWER'
        | 'STAFF_ROOM'
        | 'STORE'
        | 'TREATMENT_ROOM'
        | 'UTILITY_ROOM'
        | 'OTHER'
      /** @description Convert Cell Type (Other) */
      otherConvertedCellType?: string
      /**
       * @deprecated
       * @description Indicates the location is enabled
       * @example true
       */
      active: boolean
      /**
       * @description In-cell sanitation
       * @example true
       */
      inCellSanitation?: boolean
      /**
       * @description Indicates the location in inactive as a parent is deactivated
       * @example false
       */
      deactivatedByParent: boolean
      /**
       * Format: date-time
       * @description Date the location was deactivated
       * @example 2023-01-23T12:23:00
       */
      deactivatedDate?: string
      /**
       * @description Reason for deactivation
       * @example DAMAGED
       * @enum {string}
       */
      deactivatedReason?:
        | 'DAMAGED'
        | 'DAMP'
        | 'MAINTENANCE'
        | 'MOTHBALLED'
        | 'PEST'
        | 'REFURBISHMENT'
        | 'SECURITY_SEALED'
        | 'STAFF_SHORTAGE'
        | 'OTHER'
      /**
       * @description For OTHER deactivation reason, a free text comment is provided
       * @example Window damage
       */
      deactivationReasonDescription?: string
      /** @description Staff username who deactivated the location */
      deactivatedBy?: string
      /**
       * Format: date
       * @description Estimated reactivation date for location reactivation
       * @example 2026-01-24
       */
      proposedReactivationDate?: string
      /**
       * @description Planet FM reference number
       * @example 2323/45M
       */
      planetFmReference?: string
      /**
       * Format: uuid
       * @description Top Level Location Id
       * @example 57718979-573c-433a-9e51-2d83f887c11c
       */
      topLevelId: string
      /**
       * Format: int32
       * @description Current Level within hierarchy, starts at 1, e.g Wing = 1
       */
      level: number
      /**
       * @description Indicates this is the lowest level, often a cell
       * @example false
       */
      leafLevel: boolean
      /**
       * Format: uuid
       * @description Parent Location Id
       * @example 57718979-573c-433a-9e51-2d83f887c11c
       */
      parentId?: string
      /** @description Parent Location */
      parentLocation?: components['schemas']['Location']
      /**
       * Format: int32
       * @description Number of inactive cells below this location
       */
      inactiveCells?: number
      /**
       * Format: int32
       * @description Total number of non-structural locations are below this level, e.g. cells and rooms
       */
      numberOfCellLocations?: number
      /** @description Child Locations */
      childLocations?: components['schemas']['Location'][]
      /** @description History of changes */
      changeHistory?: components['schemas']['ChangeHistory'][]
      /** @description A list of transactions applied to this location */
      transactionHistory?: components['schemas']['TransactionHistory'][]
      /** @description Staff username who last changed the location */
      lastModifiedBy: string
      /**
       * Format: date-time
       * @description Date and time of the last change
       */
      lastModifiedDate: string
      /**
       * @description Business Key for a location
       * @example MDI-A-1-001
       */
      key: string
      /**
       * @description Indicates if the location is a residential location
       * @example true
       */
      isResidential: boolean
    }
    /** @description Non Residential Usage */
    NonResidentialUsageDto: {
      /** @enum {string} */
      usageType:
        | 'ADJUDICATION_HEARING'
        | 'APPOINTMENT'
        | 'MOVEMENT'
        | 'OCCURRENCE'
        | 'PROGRAMMES_ACTIVITIES'
        | 'PROPERTY'
        | 'VISIT'
        | 'OTHER'
      /** Format: int32 */
      capacity?: number
      /** Format: int32 */
      sequence: number
    }
    /** @description Transaction Detail */
    TransactionDetail: {
      /**
       * Format: uuid
       * @description Location Id
       * @example 019483f5-fee7-7ed0-924c-3ee4b2b51904
       */
      locationId: string
      /**
       * @description Location key
       * @example BXI-1-1-001
       */
      locationKey: string
      /**
       * @description Attribute Code
       * @enum {string}
       */
      attributeCode:
        | 'STATUS'
        | 'CERTIFICATION'
        | 'ACCOMMODATION_TYPE'
        | 'USED_FOR'
        | 'SPECIALIST_CELL_TYPE'
        | 'CONVERTED_CELL_TYPE'
        | 'WORKING_CAPACITY'
        | 'MAX_CAPACITY'
        | 'DEACTIVATION_REASON'
        | 'PROPOSED_REACTIVATION_DATE'
        | 'PLANET_FM_NUMBER'
        | 'LOCAL_NAME'
        | 'USAGE'
        | 'NON_RESIDENTIAL_CAPACITY'
        | 'CODE'
        | 'LOCATION_TYPE'
        | 'RESIDENTIAL_HOUSING_TYPE'
        | 'CERTIFIED_CAPACITY'
        | 'PARENT_LOCATION'
        | 'ORDER_WITHIN_PARENT_LOCATION'
        | 'COMMENTS'
        | 'ATTRIBUTES'
        | 'PERMANENT_DEACTIVATION'
        | 'ACTIVE'
        | 'DEACTIVATED_DATE'
        | 'DEACTIVATED_REASON'
        | 'DEACTIVATED_REASON_DESCRIPTION'
      /**
       * @description Location Attribute
       * @example Location Type
       */
      attribute: string
      /**
       * @description User who made the change
       * @example user
       */
      amendedBy: string
      /**
       * Format: date-time
       * @description Date the change was made
       * @example 2023-01-23T10:15:30
       */
      amendedDate: string
      /**
       * @description Previous values of this attribute
       * @example [
       *       "Dry cell",
       *       "Safe cell"
       *     ]
       */
      oldValues?: string[]
      /**
       * @description New values of this attribute
       * @example [
       *       "Dry cell",
       *       "Safe cell"
       *     ]
       */
      newValues?: string[]
    }
    /** @description Transaction history for location */
    TransactionHistory: {
      /**
       * Format: uuid
       * @description Unique transaction ID
       * @example 019464e9-05da-77b3-810b-887e199d8190
       */
      transactionId: string
      /**
       * @description Type of transaction
       * @example CAPACITY_CHANGE
       * @enum {string}
       */
      transactionType:
        | 'LOCATION_CREATE'
        | 'LOCATION_UPDATE'
        | 'SYNC'
        | 'DELETE'
        | 'CAPACITY_CHANGE'
        | 'CELL_TYPE_CHANGES'
        | 'DEACTIVATION'
        | 'PERMANENT_DEACTIVATION'
        | 'REACTIVATION'
        | 'CELL_CONVERTION_TO_ROOM'
        | 'ROOM_CONVERTION_TO_CELL'
        | 'SIGNED_OP_CAP'
        | 'RESI_SERVICE_ACTIVATION'
        | 'APPROVAL_PROCESS_ACTIVATION'
        | 'PENDING_CELL_CHANGE'
      /**
       * @description Prison ID of the transaction
       * @example MDI
       */
      prisonId: string
      /**
       * @description Description of the transaction
       * @example Working capacity changed from 0 to 1
       */
      transactionDetail: string
      /**
       * @description User who invoked the change
       * @example STAFF_USER1
       */
      transactionInvokedBy: string
      /**
       * Format: date-time
       * @description Date and time the transaction started
       */
      txStartTime: string
      /**
       * Format: date-time
       * @description Date and time the transaction ended
       */
      txEndTime: string
      /** @description The list of changes that were made in the transaction */
      transactionDetails: components['schemas']['TransactionDetail'][]
    }
    /** @description Request to temporarily deactivate a location */
    TemporaryDeactivationLocationRequest: {
      /**
       * @description Reason for temporary deactivation
       * @example MOTHBALLED
       * @enum {string}
       */
      deactivationReason:
        | 'DAMAGED'
        | 'DAMP'
        | 'MAINTENANCE'
        | 'MOTHBALLED'
        | 'PEST'
        | 'REFURBISHMENT'
        | 'SECURITY_SEALED'
        | 'STAFF_SHORTAGE'
        | 'OTHER'
      /**
       * @description Additional information on deactivation, for OTHER DeactivatedReason must be provided
       * @example Window broken
       */
      deactivationReasonDescription?: string
      /**
       * Format: date
       * @description Estimated reactivation date
       * @example 2025-01-05
       */
      proposedReactivationDate?: string
      /**
       * @description Planet FM reference number
       * @example 23423TH/5
       */
      planetFmReference?: string
    }
    /** @description Request to update the type of a non-res cell location */
    UpdateNonResCellTypeRequest: {
      /**
       * @description Cell type to change to
       * @example SHOWER
       * @enum {string}
       */
      convertedCellType:
        | 'HOLDING_ROOM'
        | 'INTERVIEW_ROOM'
        | 'KITCHEN_SERVERY'
        | 'LISTENERS_ROOM'
        | 'OFFICE'
        | 'SHOWER'
        | 'STAFF_ROOM'
        | 'STORE'
        | 'TREATMENT_ROOM'
        | 'UTILITY_ROOM'
        | 'OTHER'
      /**
       * @description When other, the cell type name
       * @example Hot Tub
       */
      otherConvertedCellType?: string
    }
    /** @description Request to permanently deactivate a location */
    PermanentDeactivationLocationRequest: {
      /**
       * @description Reason for permanent deactivation
       * @example Wing demolished
       */
      reason: string
    }
    /** @description Request to convert a non-res location to a cell */
    ConvertToCellRequest: {
      /**
       * @description Accommodation type of the location
       * @example NORMAL_ACCOMMODATION
       * @enum {string}
       */
      accommodationType: 'NORMAL_ACCOMMODATION' | 'HEALTHCARE_INPATIENTS' | 'CARE_AND_SEPARATION'
      /**
       * @description Specialist cell types
       * @example [
       *       "BIOHAZARD_DIRTY_PROTEST",
       *       "ACCESSIBLE_CELL"
       *     ]
       */
      specialistCellTypes?: (
        | 'ACCESSIBLE_CELL'
        | 'BIOHAZARD_DIRTY_PROTEST'
        | 'CSU'
        | 'CAT_A'
        | 'CONSTANT_SUPERVISION'
        | 'DRY'
        | 'ESCAPE_LIST'
        | 'ISOLATION_DISEASES'
        | 'LISTENER_CRISIS'
        | 'LOCATE_FLAT_CELL'
        | 'MEDICAL'
        | 'MOTHER_AND_BABY'
        | 'SAFE_CELL'
        | 'UNFURNISHED'
      )[]
      /**
       * Format: int32
       * @description Maximum capacity
       * @example 2
       */
      maxCapacity: number
      /**
       * Format: int32
       * @description Working capacity
       * @example 1
       */
      workingCapacity: number
      /**
       * @description Used For list
       * @example [
       *       "STANDARD_ACCOMMODATION",
       *       "PERSONALITY_DISORDER"
       *     ]
       */
      usedForTypes?: (
        | 'CLOSE_SUPERVISION_CENTRE'
        | 'SUB_MISUSE_DRUG_RECOVERY'
        | 'FIRST_NIGHT_CENTRE'
        | 'HIGH_SECURITY'
        | 'IPP_LONG_TERM_SENTENCES'
        | 'MOTHER_AND_BABY'
        | 'OPEN_UNIT'
        | 'PATHWAY_TO_PROG'
        | 'PERINATAL_UNIT'
        | 'PERSONALITY_DISORDER'
        | 'PIPE'
        | 'REMAND'
        | 'SEPARATION_CENTRE'
        | 'STANDARD_ACCOMMODATION'
        | 'THERAPEUTIC_COMMUNITY'
        | 'VULNERABLE_PRISONERS'
        | 'YOUNG_PERSONS'
      )[]
    }
    /** @description Request to convert a cell to a non-res location */
    ConvertCellToNonResidentialLocationRequest: {
      /**
       * @description Cell type to convert to
       * @example SHOWER
       * @enum {string}
       */
      convertedCellType:
        | 'HOLDING_ROOM'
        | 'INTERVIEW_ROOM'
        | 'KITCHEN_SERVERY'
        | 'LISTENERS_ROOM'
        | 'OFFICE'
        | 'SHOWER'
        | 'STAFF_ROOM'
        | 'STORE'
        | 'TREATMENT_ROOM'
        | 'UTILITY_ROOM'
        | 'OTHER'
      /**
       * @description Other type of converted cell
       * @example Swimming pool
       */
      otherConvertedCellType?: string
    }
    /** @description Request to update the local name of a location */
    UpdateLocationLocalNameRequest: {
      /**
       * @description Alternative description to display for location
       * @example Wing A
       */
      localName?: string
      /** @description Username of the staff updating the location */
      updatedBy?: string
    }
    /** @description Reactivate Locations Request */
    ReactivateLocationsRequest: {
      /**
       * @description List of locations to reactivate
       * @example {
       *       "de91dfa7-821f-4552-a427-bf2f32eafeb0": {
       *         "cascadeReactivation": false,
       *         "capacity": {
       *           "workingCapacity": 1,
       *           "maxCapacity": 2
       *         }
       *       }
       *     }
       */
      locations: {
        [key: string]: components['schemas']['ReactivationDetail']
      }
    }
    /** @description Reactivation Details */
    ReactivationDetail: {
      /**
       * @description List of locations to reactivate
       * @default false
       * @example true
       */
      cascadeReactivation: boolean
      /**
       * @description New capacity of the location, if null the old values are used
       * @example {
       *       "workingCapacity": 1,
       *       "maxCapacity": 2
       *     }
       */
      capacity?: components['schemas']['Capacity']
    }
    /** @description Deactivate Locations Request */
    DeactivateLocationsRequest: {
      /**
       * @description List of locations to deactivate
       * @example {
       *       "de91dfa7-821f-4552-a427-bf2f32eafeb0": {
       *         "deactivationReason": "DAMAGED"
       *       }
       *     }
       */
      locations: {
        [key: string]: components['schemas']['TemporaryDeactivationLocationRequest']
      }
    }
    /** @description Bulk permanent deactivation request */
    BulkPermanentDeactivationRequest: {
      /**
       * @description Reason for permanent deactivation
       * @example Wing demolished
       */
      reason: string
      /**
       * @description List of locations to permanently deactivate
       * @example [
       *       "TCI-A-1-001",
       *       "TCI-B-1-001",
       *       "TCI-A-2-001"
       *     ]
       */
      locations: string[]
    }
    /** @description Bulk Update Cell Capacity Details */
    CellCapacityUpdateDetail: {
      /**
       * Format: int32
       * @description Max capacity of the location
       * @example 2
       */
      maxCapacity: number
      /**
       * Format: int32
       * @description Working capacity of the location
       * @example 2
       */
      workingCapacity: number
      /**
       * Format: int32
       * @description Indicates the capacity of the certified location (cell)
       * @example 1
       */
      capacityOfCertifiedCell?: number
    }
    /** @description Update Capacities Request */
    UpdateCapacityRequest: {
      /**
       * @description List of capacities to update
       * @example {
       *       "TCI-A-1-001": {
       *         "maxCapacity": 2,
       *         "workingCapacity": 1,
       *         "capacityOfCertifiedCell": 2
       *       },
       *       "TCI-A-1-002": {
       *         "maxCapacity": 3,
       *         "workingCapacity": 1,
       *         "capacityOfCertifiedCell": 1
       *       }
       *     }
       */
      locations: {
        [key: string]: components['schemas']['CellCapacityUpdateDetail']
      }
    }
    /** @description Capacity change audit */
    CapacityChanges: {
      /**
       * @description Location reference
       * @example MDI-1-1-001
       */
      key: string
      /**
       * @description textual description of the changes
       * @example Working capacity from 2 ==> 1
       */
      message: string
      /**
       * @description Attribute changed in the update
       * @example workingCapacity
       */
      type?: string
      /**
       * Format: int32
       * @description Old value of this attribute
       * @example 2
       */
      previousValue?: number
      /**
       * Format: int32
       * @description New value of this attribute
       * @example 1
       */
      newValue?: number
    }
    /** @description Request to upsert/sync a location from NOMIS to the Locations API */
    NomisSyncLocationRequest: {
      /**
       * Format: uuid
       * @description Location UUID, provided if already exists
       * @example 2475f250-434a-4257-afe7-b911f1773a4d
       */
      id?: string
      /**
       * @description Prison ID where the location is situated
       * @example MDI
       */
      prisonId: string
      /**
       * @description Code of the location
       * @example 001
       */
      code: string
      /**
       * @description Location Type
       * @example CELL
       * @enum {string}
       */
      locationType:
        | 'WING'
        | 'SPUR'
        | 'LANDING'
        | 'CELL'
        | 'ROOM'
        | 'HOLDING_AREA'
        | 'MOVEMENT_AREA'
        | 'RESIDENTIAL_UNIT'
        | 'EXTERNAL_GROUNDS'
        | 'HOLDING_CELL'
        | 'MEDICAL'
        | 'GROUP'
        | 'OFFICE'
        | 'ADMINISTRATION_AREA'
        | 'BOOTH'
        | 'BOX'
        | 'RETURN_TO_UNIT'
        | 'CLASSROOM'
        | 'TRAINING_AREA'
        | 'TRAINING_ROOM'
        | 'EXERCISE_AREA'
        | 'AREA'
        | 'SPORTS'
        | 'WORKSHOP'
        | 'INSIDE_PARTY'
        | 'OUTSIDE_PARTY'
        | 'FAITH_AREA'
        | 'ADJUDICATION_ROOM'
        | 'APPOINTMENTS'
        | 'VISITS'
        | 'VIDEO_LINK'
        | 'ASSOCIATION'
        | 'INTERNAL_GROUNDS'
        | 'INTERVIEW'
        | 'LOCATION'
        | 'POSITION'
        | 'SHELF'
        | 'STORE'
        | 'TABLE'
      /**
       * @description Alternative description to display for location
       * @example Wing A
       */
      localName?: string
      /**
       * @description Additional comments that can be made about this location
       * @example Not to be used
       */
      comments?: string
      /**
       * Format: int32
       * @description Sequence of locations within the current parent location
       * @example 1
       */
      orderWithinParentLocation?: number
      /**
       * @description If residential location, its type
       * @example NORMAL_ACCOMMODATION
       * @enum {string}
       */
      residentialHousingType?:
        | 'HEALTHCARE'
        | 'HOLDING_CELL'
        | 'NORMAL_ACCOMMODATION'
        | 'RECEPTION'
        | 'SEGREGATION'
        | 'SPECIALIST_CELL'
        | 'OTHER_USE'
      /**
       * @description Reason for deactivation
       * @example DAMAGED
       * @enum {string}
       */
      deactivationReason?:
        | 'REFURBISHMENT'
        | 'LOCAL_WORK'
        | 'STAFF_SHORTAGE'
        | 'MOTHBALLED'
        | 'DAMAGED'
        | 'NEW_BUILDING'
        | 'CELL_RECLAIMS'
        | 'CHANGE_OF_USE'
        | 'CLOSURE'
        | 'OUT_OF_USE'
        | 'CELLS_RETURNING_TO_USE'
        | 'OTHER'
      /**
       * Format: date
       * @description Estimated reactivation date
       * @example 2025-01-05
       */
      proposedReactivationDate?: string
      /**
       * Format: date
       * @description Date deactivation occurred
       * @example 2023-01-05
       */
      deactivatedDate?: string
      /**
       * @description Path hierarchy of the parent (if one exists)
       * @example A-1
       */
      parentLocationPath?: string
      /**
       * Format: uuid
       * @description Parent UUID of the parent location (if one exists)
       * @example 2475f250-434a-4257-afe7-b911f1773a4e
       */
      parentId?: string
      /** @description Capacity details of the location */
      capacity?: components['schemas']['Capacity']
      /** @description Indicates that this location is certified for use as a residential location */
      certification?: components['schemas']['Certification']
      /** @description Location Attributes */
      attributes?: (
        | 'ANTI_BARRICADE_DOOR'
        | 'AUDITABLE_CELL_BELL'
        | 'FIXED_BED'
        | 'METAL_DOOR'
        | 'MOVABLE_BED'
        | 'PRIVACY_CURTAIN'
        | 'PRIVACY_SCREEN'
        | 'STANDARD_CELL_BELL'
        | 'SEPARATE_TOILET'
        | 'WOODEN_DOOR'
        | 'CAT_A_CELL'
        | 'DOUBLE_OCCUPANCY'
        | 'E_LIST_CELL'
        | 'GATED_CELL'
        | 'LISTENER_CELL'
        | 'LOCATE_FLAT'
        | 'MULTIPLE_OCCUPANCY'
        | 'NON_SMOKER_CELL'
        | 'OBSERVATION_CELL'
        | 'SAFE_CELL'
        | 'SINGLE_OCCUPANCY'
        | 'SPECIAL_CELL'
        | 'WHEELCHAIR_ACCESS'
        | 'UNCONVICTED_JUVENILES'
        | 'SENTENCED_JUVENILES'
        | 'UNCONVICTED_18_20'
        | 'SENTENCED_18_20'
        | 'UNCONVICTED_ADULTS'
        | 'SENTENCED_ADULTS'
        | 'VULNERABLE_PRISONER_UNIT'
        | 'SPECIAL_UNIT'
        | 'RESETTLEMENT_HOSTEL'
        | 'HEALTHCARE_CENTRE'
        | 'NATIONAL_RESOURCE_HOSPITAL'
        | 'OTHER_SPECIFIED'
        | 'REMAND_CENTRE'
        | 'LOCAL_PRISON'
        | 'CLOSED_PRISON'
        | 'OPEN_TRAINING'
        | 'HOSTEL'
        | 'CLOSED_YOUNG_OFFENDER'
        | 'OPEN_YOUNG_OFFENDER'
        | 'REMAND_UNDER_18'
        | 'SENTENCED_UNDER_18'
        | 'ECL_COMPONENT'
        | 'ADDITIONAL_SPECIAL_UNIT'
        | 'SECOND_CLOSED_TRAINER'
        | 'IMMIGRATION_DETAINEES'
        | 'CELL'
        | 'LANDING'
        | 'WING'
        | 'CAT_A'
        | 'CAT_A_EX'
        | 'CAT_A_HI'
        | 'CAT_B'
        | 'CAT_C'
        | 'CAT_D'
        | 'ELIGIBLE'
        | 'PAROLE_GRANTED'
        | 'INELIGIBLE'
        | 'YOI_CLOSED'
        | 'YOI_OPEN'
        | 'YOI_RESTRICTED'
        | 'YOI_SHORT_SENTENCE'
        | 'YOI_LONG_TERM_CLOSED'
        | 'UNCLASSIFIED'
        | 'UNCATEGORISED_SENTENCED_MALE'
        | 'LOW'
        | 'MEDIUM'
        | 'HIGH'
        | 'NOT_APPLICABLE'
        | 'PROV_A'
        | 'PENDING'
        | 'REF_REVIEW'
        | 'REFUSED_NO_REVIEW'
        | 'STANDARD'
        | 'FEMALE_RESTRICTED'
        | 'FEMALE_CLOSED'
        | 'FEMALE_SEMI'
        | 'FEMALE_OPEN'
        | 'UN_SENTENCED'
        | 'YES'
        | 'NO'
      )[]
      /** @description Location Usage */
      usage?: components['schemas']['NonResidentialUsageDto'][]
      /**
       * Format: date-time
       * @description Date location was created, if not provided then the current time will be used for a new location
       */
      createDate?: string
      /**
       * Format: date-time
       * @description Last updated, if not provided then the current time will be used
       */
      lastModifiedDate?: string
      /** @description Username of the staff updating the location */
      lastUpdatedBy: string
      isDeactivated: boolean
    }
    /** @description Location Information - for NOMIS sync */
    LegacyLocation: {
      /**
       * Format: uuid
       * @description Location Id
       * @example 2475f250-434a-4257-afe7-b911f1773a4d
       */
      id: string
      /**
       * @description Prison ID
       * @example MDI
       */
      prisonId: string
      /**
       * @description Location Code
       * @example 001
       */
      code: string
      /**
       * @description Full path of the location within the prison
       * @example A-1-001
       */
      pathHierarchy: string
      /**
       * @description Location Type
       * @example CELL
       * @enum {string}
       */
      locationType:
        | 'WING'
        | 'SPUR'
        | 'LANDING'
        | 'CELL'
        | 'ROOM'
        | 'HOLDING_AREA'
        | 'MOVEMENT_AREA'
        | 'RESIDENTIAL_UNIT'
        | 'EXTERNAL_GROUNDS'
        | 'HOLDING_CELL'
        | 'MEDICAL'
        | 'GROUP'
        | 'OFFICE'
        | 'ADMINISTRATION_AREA'
        | 'BOOTH'
        | 'BOX'
        | 'RETURN_TO_UNIT'
        | 'CLASSROOM'
        | 'TRAINING_AREA'
        | 'TRAINING_ROOM'
        | 'EXERCISE_AREA'
        | 'AREA'
        | 'SPORTS'
        | 'WORKSHOP'
        | 'INSIDE_PARTY'
        | 'OUTSIDE_PARTY'
        | 'FAITH_AREA'
        | 'ADJUDICATION_ROOM'
        | 'APPOINTMENTS'
        | 'VISITS'
        | 'VIDEO_LINK'
        | 'ASSOCIATION'
        | 'INTERNAL_GROUNDS'
        | 'INTERVIEW'
        | 'LOCATION'
        | 'POSITION'
        | 'SHELF'
        | 'STORE'
        | 'TABLE'
      /**
       * @description If residential location, its type
       * @example NORMAL_ACCOMMODATION
       * @enum {string}
       */
      residentialHousingType?:
        | 'HEALTHCARE'
        | 'HOLDING_CELL'
        | 'NORMAL_ACCOMMODATION'
        | 'RECEPTION'
        | 'SEGREGATION'
        | 'SPECIALIST_CELL'
        | 'OTHER_USE'
      /**
       * @description Alternative description to display for location, (Not Cells)
       * @example Wing A
       */
      localName?: string
      /**
       * @description Additional comments that can be made about this location
       * @example Not to be used
       */
      comments?: string
      /**
       * @description When set to true DO NOT SYNC the working capacity
       * @default false
       */
      ignoreWorkingCapacity: boolean
      /** @description Capacity details of the location */
      capacity?: components['schemas']['Capacity']
      /** @description Indicates that this location is certified for use as a residential location */
      certification?: components['schemas']['Certification']
      /** @description Location Attributes */
      attributes?: (
        | 'ANTI_BARRICADE_DOOR'
        | 'AUDITABLE_CELL_BELL'
        | 'FIXED_BED'
        | 'METAL_DOOR'
        | 'MOVABLE_BED'
        | 'PRIVACY_CURTAIN'
        | 'PRIVACY_SCREEN'
        | 'STANDARD_CELL_BELL'
        | 'SEPARATE_TOILET'
        | 'WOODEN_DOOR'
        | 'CAT_A_CELL'
        | 'DOUBLE_OCCUPANCY'
        | 'E_LIST_CELL'
        | 'GATED_CELL'
        | 'LISTENER_CELL'
        | 'LOCATE_FLAT'
        | 'MULTIPLE_OCCUPANCY'
        | 'NON_SMOKER_CELL'
        | 'OBSERVATION_CELL'
        | 'SAFE_CELL'
        | 'SINGLE_OCCUPANCY'
        | 'SPECIAL_CELL'
        | 'WHEELCHAIR_ACCESS'
        | 'UNCONVICTED_JUVENILES'
        | 'SENTENCED_JUVENILES'
        | 'UNCONVICTED_18_20'
        | 'SENTENCED_18_20'
        | 'UNCONVICTED_ADULTS'
        | 'SENTENCED_ADULTS'
        | 'VULNERABLE_PRISONER_UNIT'
        | 'SPECIAL_UNIT'
        | 'RESETTLEMENT_HOSTEL'
        | 'HEALTHCARE_CENTRE'
        | 'NATIONAL_RESOURCE_HOSPITAL'
        | 'OTHER_SPECIFIED'
        | 'REMAND_CENTRE'
        | 'LOCAL_PRISON'
        | 'CLOSED_PRISON'
        | 'OPEN_TRAINING'
        | 'HOSTEL'
        | 'CLOSED_YOUNG_OFFENDER'
        | 'OPEN_YOUNG_OFFENDER'
        | 'REMAND_UNDER_18'
        | 'SENTENCED_UNDER_18'
        | 'ECL_COMPONENT'
        | 'ADDITIONAL_SPECIAL_UNIT'
        | 'SECOND_CLOSED_TRAINER'
        | 'IMMIGRATION_DETAINEES'
        | 'CELL'
        | 'LANDING'
        | 'WING'
        | 'CAT_A'
        | 'CAT_A_EX'
        | 'CAT_A_HI'
        | 'CAT_B'
        | 'CAT_C'
        | 'CAT_D'
        | 'ELIGIBLE'
        | 'PAROLE_GRANTED'
        | 'INELIGIBLE'
        | 'YOI_CLOSED'
        | 'YOI_OPEN'
        | 'YOI_RESTRICTED'
        | 'YOI_SHORT_SENTENCE'
        | 'YOI_LONG_TERM_CLOSED'
        | 'UNCLASSIFIED'
        | 'UNCATEGORISED_SENTENCED_MALE'
        | 'LOW'
        | 'MEDIUM'
        | 'HIGH'
        | 'NOT_APPLICABLE'
        | 'PROV_A'
        | 'PENDING'
        | 'REF_REVIEW'
        | 'REFUSED_NO_REVIEW'
        | 'STANDARD'
        | 'FEMALE_RESTRICTED'
        | 'FEMALE_CLOSED'
        | 'FEMALE_SEMI'
        | 'FEMALE_OPEN'
        | 'UN_SENTENCED'
        | 'YES'
        | 'NO'
      )[]
      /** @description Location Usage */
      usage?: components['schemas']['NonResidentialUsageDto'][]
      /**
       * Format: int32
       * @description Sequence of locations within the current parent location
       * @example 1
       */
      orderWithinParentLocation?: number
      /**
       * @description Indicates the location is enabled
       * @example true
       */
      active: boolean
      /**
       * Format: date
       * @description Date the location was deactivated
       * @example 2023-01-23
       */
      deactivatedDate?: string
      /**
       * @description Reason for deactivation
       * @example DAMAGED
       * @enum {string}
       */
      deactivatedReason?:
        | 'DAMAGED'
        | 'DAMP'
        | 'MAINTENANCE'
        | 'MOTHBALLED'
        | 'PEST'
        | 'REFURBISHMENT'
        | 'SECURITY_SEALED'
        | 'STAFF_SHORTAGE'
        | 'OTHER'
      /**
       * Format: date
       * @description Estimated reactivation date for location reactivation
       * @example 2026-01-24
       */
      proposedReactivationDate?: string
      /**
       * @description Indicates that this location has been permanently deactivated and should not be changed in NOMIS
       * @default false
       * @example false
       */
      permanentlyDeactivated: boolean
      /**
       * Format: uuid
       * @description Parent Location Id
       * @example 57718979-573c-433a-9e51-2d83f887c11c
       */
      parentId?: string
      /** @description History of changes */
      changeHistory?: components['schemas']['ChangeHistory'][]
      /** @description Staff username who last changed the location */
      lastModifiedBy: string
      /**
       * Format: date-time
       * @description Date and time of the last change
       */
      lastModifiedDate: string
      /**
       * @description Business Key for a location
       * @example MDI-A-1-001
       */
      key: string
    }
    /** @description Request to create a Signed Operation Capacity Information */
    SignedOperationCapacityValidRequest: {
      /**
       * Format: int32
       * @description Signed Operation Capacity value
       * @example 100
       */
      signedOperationCapacity: number
      /**
       * @description Prison ID where the location is situated
       * @example MDI
       */
      prisonId: string
      /**
       * @description The user who updated the record
       * @example USER
       */
      updatedBy: string
    }
    /** @description Signed Operation Capacity Information */
    SignedOperationCapacityDto: {
      /**
       * Format: int32
       * @description Signed Operation Capacity
       * @example 100
       */
      signedOperationCapacity: number
      /**
       * @description The prison ID where for this signed operation capacity
       * @example MDI
       */
      prisonId: string
      /**
       * Format: date-time
       * @description Date and time of last update
       * @example 2024-11-11T08:00:00
       */
      whenUpdated: string
      /**
       * @description The user who updated the record
       * @example MALEMAN
       */
      updatedBy: string
    }
    /** @description Request to create a location */
    CreateResidentialLocationRequest: {
      /**
       * @description Prison ID where the location is situated
       * @example MDI
       */
      prisonId: string
      /**
       * @description Code of the location
       * @example 001
       */
      code: string
      /**
       * @description Accommodation Type
       * @example NORMAL_ACCOMMODATION
       * @enum {string}
       */
      accommodationType:
        | 'CARE_AND_SEPARATION'
        | 'HEALTHCARE_INPATIENTS'
        | 'NORMAL_ACCOMMODATION'
        | 'OTHER_NON_RESIDENTIAL'
      /**
       * @description Location Type
       * @example CELL
       * @enum {string}
       */
      locationType:
        | 'WING'
        | 'SPUR'
        | 'LANDING'
        | 'CELL'
        | 'ROOM'
        | 'RESIDENTIAL_UNIT'
        | 'HOLDING_CELL'
        | 'MEDICAL'
        | 'ADJUDICATION_ROOM'
        | 'FAITH_AREA'
        | 'GROUP'
        | 'STORE'
        | 'AREA'
        | 'HOLDING_AREA'
        | 'MOVEMENT_AREA'
        | 'EXTERNAL_GROUNDS'
      /**
       * @description Alternative description to display for location
       * @example Wing A
       */
      localName?: string
      /**
       * Format: uuid
       * @description ID of parent location
       * @example c73e8ad1-191b-42b8-bfce-2550cc858dab
       */
      parentId?: string
      /**
       * @description Key of parent location (can be used instead of parentId)
       * @example MDI-B-1
       */
      parentLocationKey?: string
      /** @description Capacity of the residential location */
      capacity?: components['schemas']['Capacity']
      /**
       * @description Certified status of the residential location
       * @default false
       */
      certified: boolean
      /** @description Used For Types */
      usedFor?: (
        | 'CLOSE_SUPERVISION_CENTRE'
        | 'SUB_MISUSE_DRUG_RECOVERY'
        | 'FIRST_NIGHT_CENTRE'
        | 'HIGH_SECURITY'
        | 'IPP_LONG_TERM_SENTENCES'
        | 'MOTHER_AND_BABY'
        | 'OPEN_UNIT'
        | 'PATHWAY_TO_PROG'
        | 'PERINATAL_UNIT'
        | 'PERSONALITY_DISORDER'
        | 'PIPE'
        | 'REMAND'
        | 'SEPARATION_CENTRE'
        | 'STANDARD_ACCOMMODATION'
        | 'THERAPEUTIC_COMMUNITY'
        | 'VULNERABLE_PRISONERS'
        | 'YOUNG_PERSONS'
      )[]
      /** @description Specialist Cell Types */
      specialistCellTypes?: (
        | 'ACCESSIBLE_CELL'
        | 'BIOHAZARD_DIRTY_PROTEST'
        | 'CSU'
        | 'CAT_A'
        | 'CONSTANT_SUPERVISION'
        | 'DRY'
        | 'ESCAPE_LIST'
        | 'ISOLATION_DISEASES'
        | 'LISTENER_CRISIS'
        | 'LOCATE_FLAT_CELL'
        | 'MEDICAL'
        | 'MOTHER_AND_BABY'
        | 'SAFE_CELL'
        | 'UNFURNISHED'
      )[]
      /**
       * Format: int32
       * @description CNA value
       * @default 0
       */
      capacityNormalAccommodation: number
      /**
       * @description In-cell sanitation
       * @default false
       */
      inCellSanitation: boolean
      isCell: boolean
    }
    /** @description Request to create a non-residential location */
    CreateNonResidentialLocationRequest: {
      /**
       * @description Prison ID where the location is situated
       * @example MDI
       */
      prisonId: string
      /**
       * @description Code of the location
       * @example ADJ
       */
      code: string
      /**
       * @description Location Type
       * @example ADJUDICATION_ROOM
       * @enum {string}
       */
      locationType:
        | 'GROUP'
        | 'OFFICE'
        | 'ADMINISTRATION_AREA'
        | 'BOOTH'
        | 'BOX'
        | 'RETURN_TO_UNIT'
        | 'CLASSROOM'
        | 'TRAINING_AREA'
        | 'TRAINING_ROOM'
        | 'EXERCISE_AREA'
        | 'SPORTS'
        | 'WORKSHOP'
        | 'INSIDE_PARTY'
        | 'OUTSIDE_PARTY'
        | 'FAITH_AREA'
        | 'ADJUDICATION_ROOM'
        | 'APPOINTMENTS'
        | 'VISITS'
        | 'VIDEO_LINK'
        | 'ASSOCIATION'
        | 'INTERNAL_GROUNDS'
        | 'INTERVIEW'
        | 'LOCATION'
        | 'POSITION'
        | 'SHELF'
        | 'STORE'
        | 'TABLE'
      /**
       * @description Alternative description to display for location
       * @example Adj Room
       */
      localName?: string
      /**
       * Format: uuid
       * @description ID of parent location
       * @example c73e8ad1-191b-42b8-bfce-2550cc858dab
       */
      parentId?: string
      /** @description Location Usage */
      usage?: components['schemas']['NonResidentialUsageDto'][]
    }
    /** @description Request to create a wing */
    CreateWingRequest: {
      /**
       * @description Prison ID where the location is situated
       * @example MDI
       */
      prisonId: string
      /**
       * @description Code assigned to a wing
       * @example B
       */
      wingCode: string
      /**
       * @description Alternative description to display for location
       * @example Wing A
       */
      wingDescription?: string
      /**
       * Format: int32
       * @description Number of spurs required
       * @example 2
       */
      numberOfSpurs?: number
      /**
       * Format: int32
       * @description Number of landings required
       * @example 3
       */
      numberOfLandings?: number
      /**
       * Format: int32
       * @description Number of cells required in each section (wing,landing or spur)
       * @example 40
       */
      numberOfCellsPerSection: number
      /**
       * Format: int32
       * @description Default Cell Capacity
       * @default 1
       * @example 1
       */
      defaultCellCapacity: number
    }
    /** @description Request to update a residential location */
    PatchResidentialLocationRequest: {
      /**
       * @description Code of the location
       * @example 001
       */
      code: string
      /**
       * Format: uuid
       * @description ID of parent location
       * @example c73e8ad1-191b-42b8-bfce-2550cc858dab
       */
      parentId?: string
      /**
       * @description Key of parent location
       * @example MDI-B-1
       */
      parentLocationKey?: string
      /**
       * @description Indicates this location should move to the top of the hierarchy
       * @example false
       */
      removeParent?: boolean
      /**
       * @description Accommodation type
       * @example NORMAL_ACCOMMODATION
       * @enum {string}
       */
      accommodationType?:
        | 'CARE_AND_SEPARATION'
        | 'HEALTHCARE_INPATIENTS'
        | 'NORMAL_ACCOMMODATION'
        | 'OTHER_NON_RESIDENTIAL'
      /** @description used For types */
      usedFor?: (
        | 'CLOSE_SUPERVISION_CENTRE'
        | 'SUB_MISUSE_DRUG_RECOVERY'
        | 'FIRST_NIGHT_CENTRE'
        | 'HIGH_SECURITY'
        | 'IPP_LONG_TERM_SENTENCES'
        | 'MOTHER_AND_BABY'
        | 'OPEN_UNIT'
        | 'PATHWAY_TO_PROG'
        | 'PERINATAL_UNIT'
        | 'PERSONALITY_DISORDER'
        | 'PIPE'
        | 'REMAND'
        | 'SEPARATION_CENTRE'
        | 'STANDARD_ACCOMMODATION'
        | 'THERAPEUTIC_COMMUNITY'
        | 'VULNERABLE_PRISONERS'
        | 'YOUNG_PERSONS'
      )[]
      /**
       * @description Alternative description to display for location
       * @example Wing A
       */
      localName?: string
      /**
       * @description Location Type
       * @example CELL
       * @enum {string}
       */
      locationType?:
        | 'WING'
        | 'SPUR'
        | 'LANDING'
        | 'CELL'
        | 'ROOM'
        | 'RESIDENTIAL_UNIT'
        | 'HOLDING_CELL'
        | 'MEDICAL'
        | 'ADJUDICATION_ROOM'
        | 'FAITH_AREA'
        | 'GROUP'
        | 'STORE'
        | 'AREA'
        | 'HOLDING_AREA'
        | 'MOVEMENT_AREA'
        | 'EXTERNAL_GROUNDS'
      /**
       * @description Additional comments that can be made about this location
       * @example Not to be used
       */
      comments?: string
    }
    /** @description Request to update a non-res location */
    PatchNonResidentialLocationRequest: {
      /**
       * @description Code of the location
       * @example 001
       */
      code: string
      /**
       * @description Location Type
       * @example APPOINTMENTS
       * @enum {string}
       */
      locationType:
        | 'GROUP'
        | 'OFFICE'
        | 'ADMINISTRATION_AREA'
        | 'BOOTH'
        | 'BOX'
        | 'RETURN_TO_UNIT'
        | 'CLASSROOM'
        | 'TRAINING_AREA'
        | 'TRAINING_ROOM'
        | 'EXERCISE_AREA'
        | 'SPORTS'
        | 'WORKSHOP'
        | 'INSIDE_PARTY'
        | 'OUTSIDE_PARTY'
        | 'FAITH_AREA'
        | 'ADJUDICATION_ROOM'
        | 'APPOINTMENTS'
        | 'VISITS'
        | 'VIDEO_LINK'
        | 'ASSOCIATION'
        | 'INTERNAL_GROUNDS'
        | 'INTERVIEW'
        | 'LOCATION'
        | 'POSITION'
        | 'SHELF'
        | 'STORE'
        | 'TABLE'
      /**
       * Format: uuid
       * @description ID of parent location
       * @example c73e8ad1-191b-42b8-bfce-2550cc858dab
       */
      parentId?: string
      /**
       * @description Key of parent location
       * @example MDI-B-1
       */
      parentLocationKey?: string
      /**
       * @description Indicates this location should move to the top of the hierarchy
       * @example false
       */
      removeParent?: boolean
      /** @description Non-residential usage */
      usage?: components['schemas']['NonResidentialUsageDto'][]
      /**
       * @description Alternative description to display for location
       * @example Wing A
       */
      localName?: string
      /**
       * @description Additional comments that can be made about this location
       * @example Not to be used
       */
      comments?: string
    }
    Count: {
      /**
       * Format: int64
       * @description The total number of records
       * @example 501
       */
      count: number
    }
    DlqMessage: {
      body: {
        [key: string]: Record<string, never>
      }
      messageId: string
    }
    GetDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    Alert: {
      /**
       * @description Alert type
       * @example X
       */
      alertType: string
      /**
       * @description Alert code
       * @example XA
       */
      alertCode: string
      /**
       * @description Active alert
       * @example true
       */
      active: boolean
      /**
       * @description Expired
       * @example false
       */
      expired: boolean
    }
    /** @description Prisoner Information */
    Prisoner: {
      /**
       * @description Prisoner Information
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * @description Prison ID
       * @example LEI
       */
      prisonId?: string
      /**
       * @description Prison Name
       * @example HMP Leeds
       */
      prisonName?: string
      /**
       * @description Cell location of the prisoner
       * @example 1-1-001
       */
      cellLocation?: string
      /**
       * @description Prisoner first name
       * @example Dave
       */
      firstName: string
      /**
       * @description Prisoner last name
       * @example Jones
       */
      lastName: string
      /**
       * @description Prisoner gender
       * @example Male
       */
      gender: string
      /**
       * @description Status of the prisoner
       * @example ACTIVE IN
       */
      status: string
      /**
       * @description In/Out status
       * @example IN
       */
      inOutStatus: string
      /**
       * @description Prisoner CSRA
       * @example High
       */
      csra?: string
      /**
       * @description Prisoner category
       * @example C
       */
      category?: string
      /** @description Prisoner alerts */
      alerts?: components['schemas']['Alert'][]
      /**
       * @description Last Movement Type Code of prisoner
       * @example CRT
       */
      lastMovementTypeCode?: string
    }
    /** @description Prisoner Location Information */
    PrisonerLocation: {
      /**
       * @description Cell location of the prisoner
       * @example 1-1-001
       */
      cellLocation: string
      /** @description list of prisoners in the cell */
      prisoners: components['schemas']['Prisoner'][]
    }
    /** @description Summary of cell usage for this level */
    LocationRollCount: {
      /**
       * Format: int32
       * @description Beds in use
       */
      bedsInUse: number
      /**
       * Format: int32
       * @description Currently in cell
       */
      currentlyInCell: number
      /**
       * Format: int32
       * @description Currently out
       */
      currentlyOut: number
      /**
       * Format: int32
       * @description Working capacity
       */
      workingCapacity: number
      /**
       * Format: int32
       * @description Net vacancies
       */
      netVacancies: number
      /**
       * Format: int32
       * @description Out of order
       */
      outOfOrder: number
    }
    /** @description Establishment Roll Count */
    PrisonRollCount: {
      /** @description Prison Id */
      prisonId: string
      /**
       * Format: int32
       * @description Unlock roll today
       */
      numUnlockRollToday: number
      /**
       * Format: int32
       * @description Current population
       */
      numCurrentPopulation: number
      /**
       * Format: int32
       * @description Arrived today
       */
      numArrivedToday: number
      /**
       * Format: int32
       * @description In reception
       */
      numInReception: number
      /**
       * Format: int32
       * @description Still to arrive
       */
      numStillToArrive: number
      /**
       * Format: int32
       * @description Out today
       */
      numOutToday: number
      /**
       * Format: int32
       * @description No cell allocated
       */
      numNoCellAllocated: number
      /** @description Totals */
      totals: components['schemas']['LocationRollCount']
      /** @description Residential location roll count summary */
      locations: components['schemas']['ResidentialLocationRollCount'][]
    }
    /** @description Residential Prisoner Location Information */
    ResidentialLocationRollCount: {
      /**
       * @description Unique key to this location
       * @example LEI-A-1-001
       */
      key: string
      /**
       * Format: uuid
       * @description Location Id
       * @example 2475f250-434a-4257-afe7-b911f1773a4d
       */
      locationId: string
      /**
       * @description Location Type
       * @example CELL
       * @enum {string}
       */
      locationType:
        | 'WING'
        | 'SPUR'
        | 'LANDING'
        | 'CELL'
        | 'ROOM'
        | 'HOLDING_AREA'
        | 'MOVEMENT_AREA'
        | 'RESIDENTIAL_UNIT'
        | 'EXTERNAL_GROUNDS'
        | 'HOLDING_CELL'
        | 'MEDICAL'
        | 'GROUP'
        | 'OFFICE'
        | 'ADMINISTRATION_AREA'
        | 'BOOTH'
        | 'BOX'
        | 'RETURN_TO_UNIT'
        | 'CLASSROOM'
        | 'TRAINING_AREA'
        | 'TRAINING_ROOM'
        | 'EXERCISE_AREA'
        | 'AREA'
        | 'SPORTS'
        | 'WORKSHOP'
        | 'INSIDE_PARTY'
        | 'OUTSIDE_PARTY'
        | 'FAITH_AREA'
        | 'ADJUDICATION_ROOM'
        | 'APPOINTMENTS'
        | 'VISITS'
        | 'VIDEO_LINK'
        | 'ASSOCIATION'
        | 'INTERNAL_GROUNDS'
        | 'INTERVIEW'
        | 'LOCATION'
        | 'POSITION'
        | 'SHELF'
        | 'STORE'
        | 'TABLE'
      /**
       * @description Location Code
       * @example 001
       */
      locationCode: string
      /**
       * @description Full path of the location within the prison
       * @example A-1-001
       */
      fullLocationPath: string
      /**
       * @description Alternative description to display for location, (Not Cells)
       * @example Wing A
       */
      localName?: string
      /** @description Indicates that this location is certified for use as a residential location */
      certified: boolean
      /**
       * @description Reason for deactivation
       * @example DAMAGED
       * @enum {string}
       */
      deactivatedReason?:
        | 'DAMAGED'
        | 'DAMP'
        | 'MAINTENANCE'
        | 'MOTHBALLED'
        | 'PEST'
        | 'REFURBISHMENT'
        | 'SECURITY_SEALED'
        | 'STAFF_SHORTAGE'
        | 'OTHER'
      /** @description Roll count details */
      rollCount: components['schemas']['LocationRollCount']
      /** @description Sub Locations */
      subLocations?: unknown
    }
    /** @description Location Hierarchy Summary */
    LocationSummary: {
      /**
       * Format: uuid
       * @description ID of location
       * @example c73e8ad1-191b-42b8-bfce-2550cc858dab
       */
      id?: string
      /**
       * @description Prison ID where the location is situated
       * @example MDI
       */
      prisonId: string
      /**
       * @description Code of the location
       * @example 001
       */
      code: string
      /**
       * @description Location type
       * @example WING
       * @enum {string}
       */
      type:
        | 'WING'
        | 'SPUR'
        | 'LANDING'
        | 'CELL'
        | 'ROOM'
        | 'HOLDING_AREA'
        | 'MOVEMENT_AREA'
        | 'RESIDENTIAL_UNIT'
        | 'EXTERNAL_GROUNDS'
        | 'HOLDING_CELL'
        | 'MEDICAL'
        | 'GROUP'
        | 'OFFICE'
        | 'ADMINISTRATION_AREA'
        | 'BOOTH'
        | 'BOX'
        | 'RETURN_TO_UNIT'
        | 'CLASSROOM'
        | 'TRAINING_AREA'
        | 'TRAINING_ROOM'
        | 'EXERCISE_AREA'
        | 'AREA'
        | 'SPORTS'
        | 'WORKSHOP'
        | 'INSIDE_PARTY'
        | 'OUTSIDE_PARTY'
        | 'FAITH_AREA'
        | 'ADJUDICATION_ROOM'
        | 'APPOINTMENTS'
        | 'VISITS'
        | 'VIDEO_LINK'
        | 'ASSOCIATION'
        | 'INTERNAL_GROUNDS'
        | 'INTERVIEW'
        | 'LOCATION'
        | 'POSITION'
        | 'SHELF'
        | 'STORE'
        | 'TABLE'
      /**
       * @description Alternative description to display for location
       * @example Wing A
       */
      localName?: string
      /**
       * @description Full path of the location within the prison
       * @example A-1-001
       */
      pathHierarchy: string
      /**
       * Format: int32
       * @description Current Level within hierarchy, starts at 1, e.g Wing = 1
       */
      level: number
    }
    /** @description Establishment Roll Count for Cells */
    PrisonCellRollCount: {
      /** @description Parent locations, top to bottom */
      locationHierarchy: components['schemas']['LocationSummary'][]
      /** @description Totals */
      totals: components['schemas']['LocationRollCount']
      /** @description Residential location roll count summary */
      locations: components['schemas']['ResidentialLocationRollCount'][]
    }
    PageLegacyLocation: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['LegacyLocation'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      last?: boolean
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      pageSize?: number
      paged?: boolean
      /** Format: int32 */
      pageNumber?: number
      unpaged?: boolean
    }
    SortObject: {
      empty?: boolean
      sorted?: boolean
      unsorted?: boolean
    }
    /** @description Cell attribute Information */
    CellAttributes: {
      /**
       * @description Attribute Code
       * @example CAT_A
       */
      code: Record<string, never>
      /**
       * @description Attribute description
       * @example Cat A cell
       */
      description: string
    }
    /** @description Prison Summary Information */
    PrisonSummary: {
      /** @description Prison name */
      prisonName: string
      /**
       * Format: int32
       * @description Prison working capacity
       */
      workingCapacity: number
      /**
       * Format: int32
       * @description Prison signed operational capacity
       */
      signedOperationalCapacity: number
      /**
       * Format: int32
       * @description Prison max capacity
       */
      maxCapacity: number
      /**
       * Format: int32
       * @description Total number of non-structural locations  e.g. cells and rooms
       */
      numberOfCellLocations: number
    }
    /** @description Residential Summary */
    ResidentialSummary: {
      /** @description Prison summary for top level view */
      prisonSummary?: components['schemas']['PrisonSummary']
      /**
       * @description The top level type of locations
       * @example Wings
       */
      topLevelLocationType: string
      /** @description The description of the type of sub locations most common */
      subLocationName?: string
      /** @description Parent locations, top to bottom */
      locationHierarchy: components['schemas']['LocationSummary'][]
      /** @description The current parent location (e.g Wing or Landing) details */
      parentLocation?: components['schemas']['Location']
      /** @description All residential locations under this parent */
      subLocations: components['schemas']['Location'][]
    }
    /** @description Prison hierarchy */
    PrisonHierarchyDto: {
      /**
       * Format: uuid
       * @description Location Id
       * @example 2475f250-434a-4257-afe7-b911f1773a4d
       */
      locationId: string
      /**
       * @description Location Type
       * @example CELL
       * @enum {string}
       */
      locationType:
        | 'WING'
        | 'SPUR'
        | 'LANDING'
        | 'CELL'
        | 'ROOM'
        | 'HOLDING_AREA'
        | 'MOVEMENT_AREA'
        | 'RESIDENTIAL_UNIT'
        | 'EXTERNAL_GROUNDS'
        | 'HOLDING_CELL'
        | 'MEDICAL'
        | 'GROUP'
        | 'OFFICE'
        | 'ADMINISTRATION_AREA'
        | 'BOOTH'
        | 'BOX'
        | 'RETURN_TO_UNIT'
        | 'CLASSROOM'
        | 'TRAINING_AREA'
        | 'TRAINING_ROOM'
        | 'EXERCISE_AREA'
        | 'AREA'
        | 'SPORTS'
        | 'WORKSHOP'
        | 'INSIDE_PARTY'
        | 'OUTSIDE_PARTY'
        | 'FAITH_AREA'
        | 'ADJUDICATION_ROOM'
        | 'APPOINTMENTS'
        | 'VISITS'
        | 'VIDEO_LINK'
        | 'ASSOCIATION'
        | 'INTERNAL_GROUNDS'
        | 'INTERVIEW'
        | 'LOCATION'
        | 'POSITION'
        | 'SHELF'
        | 'STORE'
        | 'TABLE'
      /**
       * @description Location Code
       * @example 001
       */
      locationCode: string
      /**
       * @description Full path of the location within the prison
       * @example A-1-001
       */
      fullLocationPath: string
      /**
       * @description Alternative description to display for location, (Not Cells)
       * @example Wing A
       */
      localName?: string
      /**
       * Format: int32
       * @description Current Level within hierarchy, starts at 1, e.g Wing = 1
       */
      level: number
      /** @description Sub residential locations */
      subLocations?: components['schemas']['PrisonHierarchyDto'][]
    }
    LocationGroupDto: {
      /**
       * @description Group name
       * @example Block A
       */
      name: string
      /**
       * @description Group key
       * @example A
       */
      key: string
      /**
       * @description The child groups of this group
       * @example [
       *       {
       *         "name": "Landing A/1",
       *         "key": "1"
       *       },
       *       {
       *         "name": "Landing A/2",
       *         "key": "2"
       *       }
       *     ]
       */
      children: components['schemas']['LocationGroupDto'][]
    }
    /** @description Cell with specialist cell attribute */
    CellType: {
      /**
       * Specialist Cell Type Code
       * @description Specialist Cell Types
       * @enum {string}
       */
      typeCode:
        | 'ACCESSIBLE_CELL'
        | 'BIOHAZARD_DIRTY_PROTEST'
        | 'CSU'
        | 'CAT_A'
        | 'CONSTANT_SUPERVISION'
        | 'DRY'
        | 'ESCAPE_LIST'
        | 'ISOLATION_DISEASES'
        | 'LISTENER_CRISIS'
        | 'LOCATE_FLAT_CELL'
        | 'MEDICAL'
        | 'MOTHER_AND_BABY'
        | 'SAFE_CELL'
        | 'UNFURNISHED'
      /** Specialist Cell Type Description */
      typeDescription: string
    }
    /** @description Cell with specialist cell attributes details */
    CellWithSpecialistCellTypes: {
      /**
       * Location identifier.
       * Format: uuid
       * @example de91dfa7-821f-4552-a427-bf2f32eafeb0
       */
      id: string
      /**
       * @description Prison ID
       * @example MDI
       */
      prisonId: string
      /**
       * @description Full path of the location within the prison
       * @example A-1-001
       */
      pathHierarchy: string
      /**
       * Current occupancy of location.
       * Format: int32
       * @example 1
       */
      noOfOccupants: number
      /**
       * Max capacity of the location.
       * Format: int32
       * @example 2
       */
      maxCapacity: number
      /**
       * Working capacity of the location.
       * Format: int32
       * @example 1
       */
      workingCapacity: number
      /**
       * Local Name of the location.
       * @example RES-HB1-ALE
       */
      localName?: string
      /**
       * List of specialist types for the cell.
       * @example [
       *       {
       *         "typeCode": "LISTENER_CRISIS",
       *         "typeDescription": "Listener / crisis cell"
       *       }
       *     ]
       */
      specialistCellTypes: components['schemas']['CellType'][]
      /**
       * List of the old location attributes.
       * @example [
       *       {
       *         "typeCode": "DOUBLE_OCCUPANCY",
       *         "typeDescription": "Double Occupancy"
       *       }
       *     ]
       */
      legacyAttributes: components['schemas']['ResidentialLocationAttribute'][]
      /** List prisoners in this cell */
      prisonersInCell: components['schemas']['Prisoner'][]
      /**
       * @description Business Key for a location
       * @example MDI-A-1-001
       */
      key: string
    }
    /** @description Cell with old location attribute */
    ResidentialLocationAttribute: {
      /**
       * Attribute Type Code
       * @enum {string}
       */
      typeCode:
        | 'ANTI_BARRICADE_DOOR'
        | 'AUDITABLE_CELL_BELL'
        | 'FIXED_BED'
        | 'METAL_DOOR'
        | 'MOVABLE_BED'
        | 'PRIVACY_CURTAIN'
        | 'PRIVACY_SCREEN'
        | 'STANDARD_CELL_BELL'
        | 'SEPARATE_TOILET'
        | 'WOODEN_DOOR'
        | 'CAT_A_CELL'
        | 'DOUBLE_OCCUPANCY'
        | 'E_LIST_CELL'
        | 'GATED_CELL'
        | 'LISTENER_CELL'
        | 'LOCATE_FLAT'
        | 'MULTIPLE_OCCUPANCY'
        | 'NON_SMOKER_CELL'
        | 'OBSERVATION_CELL'
        | 'SAFE_CELL'
        | 'SINGLE_OCCUPANCY'
        | 'SPECIAL_CELL'
        | 'WHEELCHAIR_ACCESS'
        | 'UNCONVICTED_JUVENILES'
        | 'SENTENCED_JUVENILES'
        | 'UNCONVICTED_18_20'
        | 'SENTENCED_18_20'
        | 'UNCONVICTED_ADULTS'
        | 'SENTENCED_ADULTS'
        | 'VULNERABLE_PRISONER_UNIT'
        | 'SPECIAL_UNIT'
        | 'RESETTLEMENT_HOSTEL'
        | 'HEALTHCARE_CENTRE'
        | 'NATIONAL_RESOURCE_HOSPITAL'
        | 'OTHER_SPECIFIED'
        | 'REMAND_CENTRE'
        | 'LOCAL_PRISON'
        | 'CLOSED_PRISON'
        | 'OPEN_TRAINING'
        | 'HOSTEL'
        | 'CLOSED_YOUNG_OFFENDER'
        | 'OPEN_YOUNG_OFFENDER'
        | 'REMAND_UNDER_18'
        | 'SENTENCED_UNDER_18'
        | 'ECL_COMPONENT'
        | 'ADDITIONAL_SPECIAL_UNIT'
        | 'SECOND_CLOSED_TRAINER'
        | 'IMMIGRATION_DETAINEES'
        | 'CELL'
        | 'LANDING'
        | 'WING'
        | 'CAT_A'
        | 'CAT_A_EX'
        | 'CAT_A_HI'
        | 'CAT_B'
        | 'CAT_C'
        | 'CAT_D'
        | 'ELIGIBLE'
        | 'PAROLE_GRANTED'
        | 'INELIGIBLE'
        | 'YOI_CLOSED'
        | 'YOI_OPEN'
        | 'YOI_RESTRICTED'
        | 'YOI_SHORT_SENTENCE'
        | 'YOI_LONG_TERM_CLOSED'
        | 'UNCLASSIFIED'
        | 'UNCATEGORISED_SENTENCED_MALE'
        | 'LOW'
        | 'MEDIUM'
        | 'HIGH'
        | 'NOT_APPLICABLE'
        | 'PROV_A'
        | 'PENDING'
        | 'REF_REVIEW'
        | 'REFUSED_NO_REVIEW'
        | 'STANDARD'
        | 'FEMALE_RESTRICTED'
        | 'FEMALE_CLOSED'
        | 'FEMALE_SEMI'
        | 'FEMALE_OPEN'
        | 'UN_SENTENCED'
        | 'YES'
        | 'NO'
      /** Attribute Type Description */
      typeDescription: string
    }
    DashboardDefinitionSummary: {
      id: string
      name: string
      description: string
    }
    ReportDefinitionSummary: {
      id: string
      name: string
      description?: string
      variants: components['schemas']['VariantDefinitionSummary'][]
      dashboards?: components['schemas']['DashboardDefinitionSummary'][]
      authorised: boolean
    }
    VariantDefinitionSummary: {
      id: string
      name: string
      description?: string
    }
    ChildVariantDefinition: {
      id: string
      name: string
      resourceName: string
      specification?: components['schemas']['Specification']
      joinFields: string[]
    }
    DynamicFilterOption: {
      /** Format: int32 */
      minimumLength?: number
    }
    FieldDefinition: {
      name: string
      display: string
      /** @enum {string} */
      wordWrap?: 'none' | 'normal' | 'break-words'
      filter?: components['schemas']['FilterDefinition']
      sortable: boolean
      defaultsort: boolean
      /** @enum {string} */
      type: 'boolean' | 'date' | 'double' | 'HTML' | 'long' | 'string' | 'time'
      mandatory: boolean
      visible: boolean
      calculated: boolean
      header: boolean
    }
    FilterDefinition: {
      /** @enum {string} */
      type: 'Radio' | 'Select' | 'multiselect' | 'daterange' | 'autocomplete' | 'text' | 'date' | 'granulardaterange'
      mandatory: boolean
      pattern?: string
      staticOptions?: components['schemas']['FilterOption'][]
      dynamicOptions?: components['schemas']['DynamicFilterOption']
      defaultValue?: string
      min?: string
      max?: string
      interactive?: boolean
      /** @enum {string} */
      defaultGranularity?: 'hourly' | 'daily' | 'weekly' | 'monthly' | 'quarterly' | 'annually'
      /** @enum {string} */
      defaultQuickFilterValue?:
        | 'today'
        | 'yesterday'
        | 'last-seven-days'
        | 'last-thirty-days'
        | 'last-month'
        | 'last-full-month'
        | 'last-ninety-days'
        | 'last-three-months'
        | 'last-full-three-months'
        | 'last-year'
        | 'last-full-year'
        | 'tomorrow'
        | 'next-seven-days'
        | 'next-thirty-days'
        | 'next-month'
        | 'next-full-month'
        | 'next-ninety-days'
        | 'next-three-months'
        | 'next-full-three-months'
        | 'next-year'
        | 'next-full-year'
    }
    FilterOption: {
      name: string
      display: string
    }
    ReportSummary: {
      id: string
      /** @enum {string} */
      template: 'table-header' | 'table-footer' | 'section-header' | 'section-footer' | 'page-header' | 'page-footer'
      fields: components['schemas']['SummaryField'][]
    }
    SingleVariantReportDefinition: {
      id: string
      name: string
      description?: string
      variant: components['schemas']['VariantDefinition']
    }
    Specification: {
      /** @enum {string} */
      template: 'list' | 'list-section' | 'list-tab' | 'summary' | 'summary-section' | 'parent-child'
      fields: components['schemas']['FieldDefinition'][]
      sections: string[]
    }
    SummaryField: {
      name: string
      display?: string
      /** @enum {string} */
      type?: 'boolean' | 'date' | 'double' | 'HTML' | 'long' | 'string' | 'time'
      header?: boolean
      mergeRows?: boolean
    }
    VariantDefinition: {
      id: string
      name: string
      resourceName: string
      description?: string
      specification?: components['schemas']['Specification']
      classification?: string
      printable?: boolean
      summaries?: components['schemas']['ReportSummary'][]
      interactive?: boolean
      childVariants?: components['schemas']['ChildVariantDefinition'][]
    }
    DashboardDefinition: {
      id: string
      name: string
      description: string
      sections: components['schemas']['DashboardSectionDefinition'][]
      filterFields?: components['schemas']['FieldDefinition'][]
    }
    DashboardSectionDefinition: {
      id: string
      display?: string
      description?: string
      visualisations: components['schemas']['DashboardVisualisationDefinition'][]
    }
    DashboardVisualisationColumnDefinition: {
      id: string
      display: string
      /** @enum {string} */
      aggregate?: 'sum' | 'average'
      /** @enum {string} */
      unit?: 'NUMBER' | 'PERCENTAGE'
      displayValue?: boolean
      axis?: string
    }
    DashboardVisualisationColumnsDefinition: {
      keys?: components['schemas']['DashboardVisualisationColumnDefinition'][]
      measures: components['schemas']['DashboardVisualisationColumnDefinition'][]
      filters?: components['schemas']['ValueVisualisationColumnDefinition'][]
      expectNulls: boolean
    }
    DashboardVisualisationDefinition: {
      id: string
      /** @enum {string} */
      type: 'list' | 'doughnut' | 'bar' | 'bar-timeseries' | 'line' | 'scorecard' | 'scorecard-group'
      display?: string
      description?: string
      columns: components['schemas']['DashboardVisualisationColumnsDefinition']
    }
    ValueVisualisationColumnDefinition: {
      id: string
      equals: string
    }
    /** @description Reference data information */
    Constant: {
      /**
       * @description Code of reference information
       * @example ACCESSIBLE_CELL
       */
      key: string
      /**
       * @description Description of reference code
       * @example Accessible cell
       */
      description: string
      /**
       * @description Additional information about this reference code
       * @example Some useful extra info
       */
      additionalInformation?: string
    }
    /** @description Reference data information */
    CompoundConstant: {
      /**
       * @description Code of reference information
       * @example ACCESSIBLE_CELL
       */
      key: string
      /**
       * @description Description of reference code
       * @example Accessible cell
       */
      description: string
      /** @description Sub list of reference data values */
      values: components['schemas']['Constant'][]
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  retryDlq: {
    parameters: {
      query?: never
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  retryAllDlqs: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      query?: never
      header?: never
      path: {
        queueName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateResiLocationServiceActiveStatus: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prison ID
         * @example MDI
         */
        prisonId: string
        /**
         * @description Status of the resi service to change
         * @example ACTIVE
         */
        status: 'ACTIVE' | 'INACTIVE'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns configuration */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonConfigurationDto']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the LOCATION_CONFIG_ADMIN role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateCertificationApprovalProcessForPrison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prison ID
         * @example MDI
         */
        prisonId: string
        /**
         * @description Activate/Deactivate the certification approval process for this prison
         * @example ACTIVE
         */
        approvalProcessStatus: 'ACTIVE' | 'INACTIVE'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns configuration */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonConfigurationDto']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the LOCATION_CONFIG_ADMIN role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateUsedForType: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The location Id
         * @example de91dfa7-821f-4552-a427-bf2f32eafeb0
         */
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': (
          | 'CLOSE_SUPERVISION_CENTRE'
          | 'SUB_MISUSE_DRUG_RECOVERY'
          | 'FIRST_NIGHT_CENTRE'
          | 'HIGH_SECURITY'
          | 'IPP_LONG_TERM_SENTENCES'
          | 'MOTHER_AND_BABY'
          | 'OPEN_UNIT'
          | 'PATHWAY_TO_PROG'
          | 'PERINATAL_UNIT'
          | 'PERSONALITY_DISORDER'
          | 'PIPE'
          | 'REMAND'
          | 'SEPARATION_CENTRE'
          | 'STANDARD_ACCOMMODATION'
          | 'THERAPEUTIC_COMMUNITY'
          | 'VULNERABLE_PRISONERS'
          | 'YOUNG_PERSONS'
        )[]
      }
    }
    responses: {
      /** @description Returns details of the updated locations */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateDeactivateDetails: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The location Id
         * @example de91dfa7-821f-4552-a427-bf2f32eafeb0
         */
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TemporaryDeactivationLocationRequest']
      }
    }
    responses: {
      /** @description Returns deactivated location */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateNonResidentialCellType: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The location Id
         * @example de91dfa7-821f-4552-a427-bf2f32eafeb0
         */
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateNonResCellTypeRequest']
      }
    }
    responses: {
      /** @description Returns updated location */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateSpecialistCellTypes: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The location Id
         * @example de91dfa7-821f-4552-a427-bf2f32eafeb0
         */
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': (
          | 'ACCESSIBLE_CELL'
          | 'BIOHAZARD_DIRTY_PROTEST'
          | 'CSU'
          | 'CAT_A'
          | 'CONSTANT_SUPERVISION'
          | 'DRY'
          | 'ESCAPE_LIST'
          | 'ISOLATION_DISEASES'
          | 'LISTENER_CRISIS'
          | 'LOCATE_FLAT_CELL'
          | 'MEDICAL'
          | 'MOTHER_AND_BABY'
          | 'SAFE_CELL'
          | 'UNFURNISHED'
        )[]
      }
    }
    responses: {
      /** @description Returns details of the updated cell */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  reactivateLocation: {
    parameters: {
      query?: {
        'cascade-reactivation'?: boolean
      }
      header?: never
      path: {
        /**
         * @description The location Id
         * @example de91dfa7-821f-4552-a427-bf2f32eafeb0
         */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns reactivation location */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  temporarilyDeactivateLocation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The location Id
         * @example de91dfa7-821f-4552-a427-bf2f32eafeb0
         */
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TemporaryDeactivationLocationRequest']
      }
    }
    responses: {
      /** @description Returns deactivated locations */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  permanentlyDeactivateLocation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The location Id
         * @example de91dfa7-821f-4552-a427-bf2f32eafeb0
         */
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PermanentDeactivationLocationRequest']
      }
    }
    responses: {
      /** @description Returns archived location */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  convertToCellLocation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The location Id
         * @example de91dfa7-821f-4552-a427-bf2f32eafeb0
         */
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ConvertToCellRequest']
      }
    }
    responses: {
      /** @description Returns updated location */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location Accommodation Type Other Non Residential cannot be accepted */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  convertCellToNonResidentialLocation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The location Id
         * @example de91dfa7-821f-4552-a427-bf2f32eafeb0
         */
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ConvertCellToNonResidentialLocationRequest']
      }
    }
    responses: {
      /** @description Returns updated location */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateLocalName: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The location Id
         * @example de91dfa7-821f-4552-a427-bf2f32eafeb0
         */
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateLocationLocalNameRequest']
      }
    }
    responses: {
      /** @description Returns cell location changes */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  changeCapacity: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The location Id
         * @example de91dfa7-821f-4552-a427-bf2f32eafeb0
         */
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Capacity']
      }
    }
    responses: {
      /** @description Returns cell location changes */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  bulkReactivateLocations: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReactivateLocationsRequest']
      }
    }
    responses: {
      /** @description Returns updated locations */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  bulkDeactivateLocations: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DeactivateLocationsRequest']
      }
    }
    responses: {
      /** @description Returns deactivated locations */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  bulkPermanentlyDeactivateLocations: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BulkPermanentDeactivationRequest']
      }
    }
    responses: {
      /** @description Returns perm deactivated locations */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  bulkUpdateCapacity: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCapacityRequest']
      }
    }
    responses: {
      /** @description Returns list of changes made to capacity locations */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            [key: string]: components['schemas']['CapacityChanges'][]
          }
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  upsertLocation: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NomisSyncLocationRequest']
      }
    }
    responses: {
      /** @description Updated location */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyLocation']
        }
      }
      /** @description Created location */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyLocation']
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the SYNC_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Data not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateSignedOperationCapacity: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SignedOperationCapacityValidRequest']
      }
    }
    responses: {
      /** @description Returns created Signed Operation Capacity */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SignedOperationCapacityDto']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the ROLE_MAINTAIN_LOCATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description PrisonID not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Signed Operation Capacity already has this value */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createResidentialLocation: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateResidentialLocationRequest']
      }
    }
    responses: {
      /** @description Returns created location */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Data not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location already exists */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createNonResidentialLocation: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateNonResidentialLocationRequest']
      }
    }
    responses: {
      /** @description Returns created location */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Data not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location already exists */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationsByKeys: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description Returns location */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Data not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createWing: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateWingRequest']
      }
    }
    responses: {
      /** @description Returns created locations */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location already exists */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  patchResidentialLocation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The location Id
         * @example de91dfa7-821f-4552-a427-bf2f32eafeb0
         */
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchResidentialLocationRequest']
      }
    }
    responses: {
      /** @description Returns updated location */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Data not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location already exists */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  patchResidentialLocationByKey: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Location key
         * @example MDI-A-1-001
         */
        key: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchResidentialLocationRequest']
      }
    }
    responses: {
      /** @description Returns updated location */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Data not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location already exists */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  patchNonResidentialLocation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The location Id
         * @example de91dfa7-821f-4552-a427-bf2f32eafeb0
         */
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchNonResidentialLocationRequest']
      }
    }
    responses: {
      /** @description Returns updated location */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Data not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location already exists */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  patchNonResidentialLocationByKey: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The location key
         * @example MDI-VISIT
         */
        key: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchNonResidentialLocationRequest']
      }
    }
    responses: {
      /** @description Returns updated location */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Data not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location already exists */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getTransaction: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The transaction Id
         * @example de91dfa7-821f-4552-a427-bf2f32eafeb0
         */
        txId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns transaction information */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TransactionHistory']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_LOCATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Tx not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocation: {
    parameters: {
      query?: {
        includeHistory?: boolean
      }
      header?: never
      path: {
        /**
         * @description The location Id
         * @example de91dfa7-821f-4552-a427-bf2f32eafeb0
         */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns location in NOMIS format */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyLocation']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_LOCATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Data not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSignedOperationCapacity: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns Signed Operation Capacity data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SignedOperationCapacityDto']
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the ROLE_VIEW_LOCATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Signed operation capacity not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  configuredApiDataset: {
    parameters: {
      query: {
        selectedPage?: number
        pageSize?: number
        sortColumn?: string
        sortedAsc?: boolean
        /**
         * @description The filter query parameters have to start with the prefix "filters." followed by the name of the filter.
         *           For range filters, like date for instance, these need to be followed by a .start or .end suffix accordingly.
         *           For multiselect filters, these are passed as one query parameter per filter with a comma separated list of values:
         *           filters.someMultiselectFilter=a,b,c
         *
         * @example {
         *       "filters.date.start": "2023-04-25",
         *       "filters.date.end": "2023-05-30",
         *       "filters.someMultiselectFilter": "a,b,c"
         *     }
         */
        filters: {
          [key: string]: string
        }
        /**
         * @description This optional parameter sets the path of the directory of the data product definition files your application will use.
         *           "This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.
         * @example definitions/prisons/orphanage
         */
        dataProductDefinitionsPath?: string
      }
      header?: never
      path: {
        reportId: string
        reportVariantId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description default response */
      default: {
        headers: {
          /** @description Provides additional information about why no data has been returned. */
          'x-no-data-warning'?: string
          [name: string]: unknown
        }
        content: {
          '*/*': {
            [key: string]: Record<string, never>
          }[]
        }
      }
    }
  }
  configuredApiDynamicFilter: {
    parameters: {
      query: {
        pageSize?: number
        sortedAsc?: boolean
        /**
         * @description The filter query parameters have to start with the prefix "filters." followed by the name of the filter.
         *           For range filters, like date for instance, these need to be followed by a .start or .end suffix accordingly.
         *           For multiselect filters, these are passed as one query parameter per filter with a comma separated list of values:
         *           filters.someMultiselectFilter=a,b,c
         *
         * @example {
         *       "filters.date.start": "2023-04-25",
         *       "filters.date.end": "2023-05-30",
         *       "filters.someMultiselectFilter": "a,b,c"
         *     }
         */
        filters: {
          [key: string]: string
        }
        /**
         * @description The value to match the start of the fieldId
         * @example Lond
         */
        prefix: string
        /**
         * @description This optional parameter sets the path of the directory of the data product definition files your application will use.
         *           "This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.
         * @example definitions/prisons/orphanage
         */
        dataProductDefinitionsPath?: string
      }
      header?: never
      path: {
        reportId: string
        reportVariantId: string
        /**
         * @description The name of the schema field which will be used as a dynamic filter.
         * @example name
         */
        fieldId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description default response */
      default: {
        headers: {
          /** @description Provides additional information about why no data has been returned. */
          'x-no-data-warning'?: string
          [name: string]: unknown
        }
        content: {
          '*/*': string[]
        }
      }
    }
  }
  configuredApiCount: {
    parameters: {
      query: {
        /**
         * @description The filter query parameters have to start with the prefix "filters." followed by the name of the filter.
         *           For range filters, like date for instance, these need to be followed by a .start or .end suffix accordingly.
         *           For multiselect filters, these are passed as one query parameter per filter with a comma separated list of values:
         *           filters.someMultiselectFilter=a,b,c
         *
         * @example {
         *       "filters.date.start": "2023-04-25",
         *       "filters.date.end": "2023-05-30",
         *       "filters.someMultiselectFilter": "a,b,c"
         *     }
         */
        filters: {
          [key: string]: string
        }
        /**
         * @description This optional parameter sets the path of the directory of the data product definition files your application will use.
         *           "This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.
         * @example definitions/prisons/orphanage
         */
        dataProductDefinitionsPath?: string
      }
      header?: never
      path: {
        reportId: string
        reportVariantId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description default response */
      default: {
        headers: {
          /** @description Provides additional information about why no data has been returned. */
          'x-no-data-warning'?: string
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['Count']
        }
      }
    }
  }
  getDlqMessages: {
    parameters: {
      query?: {
        maxMessages?: number
      }
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonersInLocationByPrison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Prison ID */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns location */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerLocation'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_PRISONER_LOCATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonersInLocationByKey: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Full location key, can be a wing, landing or cell, prisonId must be included */
        key: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns location */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerLocation'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_PRISONER_LOCATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonersInLocationById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Location Id, can be a wing, landing or cell
         * @example de91dfa7-821f-4552-a427-bf2f32eafeb0
         */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns location */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerLocation'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_PRISONER_LOCATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonRollCount: {
    parameters: {
      query?: {
        'include-cells'?: boolean
      }
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns roll count for a specific prison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonRollCount']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the ESTABLISHMENT_ROLL role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCellLevelRollCount: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prisonId: string
        /**
         * @description Location ID of parent of the cells
         * @example 2475f250-434a-4257-afe7-b911f1773a4d
         */
        locationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns cell list of roll-counts for a specific prison and sub-location */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonCellRollCount']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the ESTABLISHMENT_ROLL role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonConfiguration: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prison ID
         * @example MDI
         */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns configuration */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonConfigurationDto']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the LOCATION_CONFIG_ADMIN role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocations: {
    parameters: {
      query?: {
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description A page of locations are returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageLegacyLocation']
        }
      }
      /** @description When input parameters are not valid */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_LOCATIONS role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  findLocationByLocalName: {
    parameters: {
      query?: {
        /**
         * @description The level above in this hierarchy to look below, empty will check prison level
         * @example de91dfa7-821f-4552-a427-bf2f32eafeb0
         */
        parentLocationId?: string
      }
      header?: never
      path: {
        /**
         * @description Prison ID where the location is situated
         * @example MDI
         */
        prisonId: string
        /**
         * @description Alternative description to display for location
         * @example Wing A
         */
        localName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns cell location matching */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_LOCATIONS role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocation_1: {
    parameters: {
      query?: {
        includeChildren?: boolean
        includeHistory?: boolean
        formatLocalName?: boolean
      }
      header?: never
      path: {
        /**
         * @description The location Id
         * @example de91dfa7-821f-4552-a427-bf2f32eafeb0
         */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns location */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_LOCATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Data not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCellAttributes: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The location Id
         * @example de91dfa7-821f-4552-a427-bf2f32eafeb0
         */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description A cell's attributes are returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CellAttributes'][]
        }
      }
      /** @description When input parameters are not valid */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_LOCATIONS role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationForPrisonBelowParent: {
    parameters: {
      query?: {
        /**
         * @description Parent location ID
         * @example de91dfa7-821f-4552-a427-bf2f32eafeb0
         */
        parentLocationId?: string
        /**
         * @description Parent location path hierarchy, can be a Wing code, or landing code
         * @example A-1
         */
        parentPathHierarchy?: string
        /** @description Include latest history */
        latestHistory?: boolean
      }
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns locations for this level */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ResidentialSummary']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_LOCATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Data not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationForPrison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns locations */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_LOCATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Data not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonHierarchy: {
    parameters: {
      query?: {
        /**
         * @description The maximum level to return, default is all if not defined.  Most APIs will just need the first level so maxLevel=1
         * @example 1
         */
        maxLevel?: number
        /**
         * @description Include virtual locations such as CSWAP and RECP
         * @example false
         */
        includeVirtualLocations?: boolean
      }
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns hierarchy for this prison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonHierarchyDto'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_LOCATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Data not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getTopLevelResidentialLocations: {
    parameters: {
      query?: {
        /**
         * @description Include virtual locations such as CSWAP and RECP
         * @example false
         */
        includeVirtualLocations?: boolean
      }
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns hierarchy for this prison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonHierarchyDto'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_LOCATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Data not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getNonResidentialLocationsForPrison: {
    parameters: {
      query?: {
        sortByLocalName?: boolean
        formatLocalName?: boolean
      }
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns a list of non-residential locations for a prison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_LOCATIONS role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prison not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationsByPrisonWithUsageTypes: {
    parameters: {
      query?: {
        sortByLocalName?: boolean
        formatLocalName?: boolean
        filterParents?: boolean
      }
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns non-residential locations */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_LOCATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationsByPrisonAndNonResidentialUsageType: {
    parameters: {
      query?: {
        sortByLocalName?: boolean
        formatLocalName?: boolean
        filterParents?: boolean
      }
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prisonId: string
        /**
         * @description Usage type
         * @example APPOINTMENTS
         */
        usageType:
          | 'ADJUDICATION_HEARING'
          | 'APPOINTMENT'
          | 'MOVEMENT'
          | 'OCCURRENCE'
          | 'PROGRAMMES_ACTIVITIES'
          | 'PROPERTY'
          | 'VISIT'
          | 'OTHER'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns non-residential locations */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_LOCATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationsByPrisonAndLocationType: {
    parameters: {
      query?: {
        sortByLocalName?: boolean
        formatLocalName?: boolean
      }
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prisonId: string
        /**
         * @description Location type
         * @example CELL
         */
        locationType:
          | 'WING'
          | 'SPUR'
          | 'LANDING'
          | 'CELL'
          | 'ROOM'
          | 'HOLDING_AREA'
          | 'MOVEMENT_AREA'
          | 'RESIDENTIAL_UNIT'
          | 'EXTERNAL_GROUNDS'
          | 'HOLDING_CELL'
          | 'MEDICAL'
          | 'GROUP'
          | 'OFFICE'
          | 'ADMINISTRATION_AREA'
          | 'BOOTH'
          | 'BOX'
          | 'RETURN_TO_UNIT'
          | 'CLASSROOM'
          | 'TRAINING_AREA'
          | 'TRAINING_ROOM'
          | 'EXERCISE_AREA'
          | 'AREA'
          | 'SPORTS'
          | 'WORKSHOP'
          | 'INSIDE_PARTY'
          | 'OUTSIDE_PARTY'
          | 'FAITH_AREA'
          | 'ADJUDICATION_ROOM'
          | 'APPOINTMENTS'
          | 'VISITS'
          | 'VIDEO_LINK'
          | 'ASSOCIATION'
          | 'INTERNAL_GROUNDS'
          | 'INTERVIEW'
          | 'LOCATION'
          | 'POSITION'
          | 'SHELF'
          | 'STORE'
          | 'TABLE'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns locations */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_LOCATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Data not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getInactiveLocationsForPrison: {
    parameters: {
      query?: {
        /**
         * @description location ID below which all inactive cells will be returned
         * @example de91dfa7-821f-4552-a427-bf2f32eafeb0
         */
        parentLocationId?: string
      }
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns inactive locations */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_LOCATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationGroupsForPrison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns location groups */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LocationGroupDto'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_LOCATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Data not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationPrefixFromGroup: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prisonId: string
        /**
         * @description The group name
         * @example Houseblock 1
         */
        group: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_LOCATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Data not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getArchivedLocationForPrison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns archived locations */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_LOCATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Data not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationByKey: {
    parameters: {
      query?: {
        includeChildren?: boolean
        includeHistory?: boolean
      }
      header?: never
      path: {
        /**
         * @description Location Key
         * @example MDI-A-1-001
         */
        key: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns location */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_LOCATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Data not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationGroup: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prisonId: string
        /** @description Group name */
        name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns cell locations by group */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_LOCATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Data not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCellsWithCapacity: {
    parameters: {
      query?: {
        /**
         * @description Location Id in the prison below which to find cells
         * @example de91dfa7-821f-4552-a427-bf2f32eafeb0
         */
        locationId?: string
        /**
         * @description Group name for a sub location to find cells
         * @example Wing A
         */
        groupName?: string
        /**
         * @description Only return cells of a specified specialist type
         * @example CSU
         */
        specialistCellType?:
          | 'ACCESSIBLE_CELL'
          | 'BIOHAZARD_DIRTY_PROTEST'
          | 'CSU'
          | 'CAT_A'
          | 'CONSTANT_SUPERVISION'
          | 'DRY'
          | 'ESCAPE_LIST'
          | 'ISOLATION_DISEASES'
          | 'LISTENER_CRISIS'
          | 'LOCATE_FLAT_CELL'
          | 'MEDICAL'
          | 'MOTHER_AND_BABY'
          | 'SAFE_CELL'
          | 'UNFURNISHED'
        /** @description Include prisoner details in this cell */
        includePrisonerInformation?: boolean
      }
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns cells with capacity available */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CellWithSpecialistCellTypes'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the VIEW_LOCATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Data not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  definitions: {
    parameters: {
      query?: {
        /**
         * @description Set this parameter to filter the list to only include reports for the given rendering method.
         * @example HTML
         */
        renderMethod?: 'HTML' | 'PDF' | 'SVG'
        /**
         * @description This optional parameter sets the path of the directory of the data product definition files your application will use.
         *           "This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.
         * @example definitions/prisons/orphanage
         */
        dataProductDefinitionsPath?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ReportDefinitionSummary'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  definition: {
    parameters: {
      query?: {
        /**
         * @description This optional parameter sets the path of the directory of the data product definition files your application will use.
         *           "This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.
         * @example definitions/prisons/orphanage
         */
        dataProductDefinitionsPath?: string
      }
      header?: never
      path: {
        /**
         * @description The ID of the report definition.
         * @example external-movements
         */
        reportId: string
        /**
         * @description The ID of the variant definition.
         * @example list
         */
        variantId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['SingleVariantReportDefinition']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  dashboardDefinition: {
    parameters: {
      query?: {
        /**
         * @description This optional parameter sets the path of the directory of the data product definition files your application will use.
         *           "This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.
         * @example definitions/prisons/orphanage
         */
        dataProductDefinitionsPath?: string
      }
      header?: never
      path: {
        /**
         * @description The ID of the Data Product Definition.
         * @example external-movements
         */
        dataProductDefinitionId: string
        /**
         * @description The ID of the dashboard.
         * @example dashboardId
         */
        dashboardId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['DashboardDefinition']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getUsedForTypeConstants: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns used for type reference data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            [key: string]: components['schemas']['Constant'][]
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the READ_LOCATION_REFERENCE_DATA role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getUsedForTypeConstantsForSpecifiedPrison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns used for type reference data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            [key: string]: components['schemas']['Constant'][]
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the READ_LOCATION_REFERENCE_DATA role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSpecialistCellTypeConstants: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns specialist cell reference data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            [key: string]: components['schemas']['Constant'][]
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the READ_LOCATION_REFERENCE_DATA role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  locationAttributeConstants: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns location reference data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            [key: string]: components['schemas']['Constant'][]
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the READ_LOCATION_REFERENCE_DATA role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  residentialAttributeTypeConstants: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns residential attribute reference data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            [key: string]: components['schemas']['CompoundConstant'][]
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the READ_LOCATION_REFERENCE_DATA role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  nonResidentialUsageTypeConstants: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns location reference data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            [key: string]: components['schemas']['Constant'][]
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the READ_LOCATION_REFERENCE_DATA role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  locationConstants: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns location reference data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            [key: string]: components['schemas']['Constant'][]
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the READ_LOCATION_REFERENCE_DATA role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deactivedReasonsConstants: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns location reference data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            [key: string]: components['schemas']['Constant'][]
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the READ_LOCATION_REFERENCE_DATA role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getConvertedCellType: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns converted cell reference data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            [key: string]: components['schemas']['Constant'][]
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the READ_LOCATION_REFERENCE_DATA role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAccommodationTypeConstants: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns accommodation reference data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            [key: string]: components['schemas']['Constant'][]
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the READ_LOCATION_REFERENCE_DATA role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteLocation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Location UUID to remove
         * @example 2475f250-434a-4257-afe7-b911f1773a4d
         */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Deleted location */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the SYNC_LOCATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Data not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
