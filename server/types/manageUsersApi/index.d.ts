/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/roles/{roleCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Amend role name
     * @description Amend the role name, role required is ROLE_ROLES_ADMIN
     */
    put: operations['amendRoleName']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/roles/{roleCode}/description': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Amend role description
     * @description Amend the role description, role required is ROLE_ROLES_ADMIN
     */
    put: operations['amendRoleDescription']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/roles/{roleCode}/admintype': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Amend role admin type
     * @description Amend the role admin type, role required is ROLE_ROLES_ADMIN
     */
    put: operations['amendRoleAdminType']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisonusers/{username}/enable-user': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Unlock user account
     * @description Unlocks the user account. Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT
     */
    put: operations['enableUser']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisonusers/{username}/disable-user': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Lock user account
     * @description Locks the user account. Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT
     */
    put: operations['disableUser']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/groups/{group}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Group detail.
     * @description return Group Details
     */
    get: operations['getGroupDetail']
    /**
     * Amend group name.
     * @description Amend group name.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS
     */
    put: operations['amendGroupName']
    post?: never
    /**
     * Delete group.
     * @description Delete a Group.<br.>Requires role ROLE_MAINTAIN_OAUTH_USERS
     */
    delete: operations['deleteGroup']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/groups/child/{group}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Child Group detail.
     * @description Fetches child group details.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS
     */
    get: operations['getChildGroupDetail']
    /**
     * Amend child group name.
     * @description Amend a Child Group Name.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS
     */
    put: operations['amendChildGroupName']
    post?: never
    /**
     * Delete child group.
     * @description Delete a child group.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS
     */
    delete: operations['deleteChildGroup']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/externalusers/{userId}/roles/{role}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Add role to user.
     * @description Add role to user. Requires role ROLE_MAINTAIN_OAUTH_USERS, ROLE_AUTH_GROUP_MANAGER or ROLE_MAINTAIN_IMS_USERS
     */
    put: operations['addRoleByUserId']
    post?: never
    /**
     * Remove role from user.
     * @description Remove role from user.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS , ROLE_AUTH_GROUP_MANAGER or ROLE_MAINTAIN_IMS_USERS
     */
    delete: operations['removeRoleByUserId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/externalusers/{userId}/groups/{group}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Add group to user.
     * @description Add group to user. Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
     */
    put: operations['addGroupByUserId']
    post?: never
    /**
     * Remove group from user.
     * @description Remove group from user. Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
     */
    delete: operations['removeGroupByUserId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/externalusers/{userId}/enable': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Enable a user.
     * @description Enable a user. Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
     */
    put: operations['enableUserByUserId']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/externalusers/{userId}/disable': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Disable a user.
     * @description Disable a user. Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
     */
    put: operations['disableUserByUserId']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/allowlist': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all allow list users.
     * @description Get all allow list users, optionally filtering on name and status
     */
    get: operations['getAllAllowlistUsers']
    put?: never
    /**
     * Add a user to the allow list.
     * @description Add a user to the allow list
     */
    post: operations['addUser']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/roles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all roles
     * @description Get all roles, role required is ROLE_ROLES_ADMIN (to find external roles), ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
     */
    get: operations['getRoles']
    put?: never
    /**
     * Create role
     * @description Create a new role, role required is ROLE_ROLES_ADMIN
     */
    post: operations['createRole']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisonusers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Find prison users by first and last name.
     * @description Find prison users by first and last name. Requires role ROLE_USE_OF_FORCE or ROLE_STAFF_SEARCH
     */
    get: operations['findUsersByFirstAndLastName']
    put?: never
    /**
     * Create a DPS user
     * @description Creates a specific DPS user. Requires role ROLE_CREATE_USER
     */
    post: operations['createUser']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisonusers/{username}/roles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of roles associated with the users account
     * @description Roles for a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
     */
    get: operations['getUserRoles']
    put?: never
    /**
     * Add a role to the specified user account, all roles will be added to DPS caseload unless specified
     * @description Adds a role to a user, user must have caseload (if specified). Default caseload is DPS caseload (NWEB).  Cannot add an existing role to the same user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
     */
    post: operations['addRoles']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisonusers/{username}/email': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Amend a prison user email address.
     * @description Amend a prison user email address. Requires role MAINTAIN_ACCESS_ROLES_ADMIN
     */
    post: operations['amendUserEmail']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisonusers/{username}/email/sync': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Sync Nomis user email back into Auth
     * @description Run process to check for differences in email address between Auth and NOMIS and updates Auth if required.<br/> Requires role ROLE_MAINTAIN_ACCESS_ROLES or ROLE_MAINTAIN_ACCESS_ROLES_ADMIN
     */
    post: operations['syncUserEmail']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisonusers/{username}/caseloads': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of caseloads associated with the users account
     * @description Caseloads for a specific user. Requires role ROLE_USER_PERMISSIONS__RO or ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
     */
    get: operations['getUserCaseloads']
    put?: never
    /**
     * Add multiple caseloads to the specified user account
     * @description Adds caseloads to a user, caseloads must exist. Cannot add an existing caseload to the same user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN
     */
    post: operations['addCaseloads']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/linkedprisonusers/lsa': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Link a Local Admin User to an existing General Account
     * @description Link a Local Admin User to an existing General Account. Requires role ROLE_CREATE_USER
     */
    post: operations['createLinkedLocalAdminUser']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/linkedprisonusers/general': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Link a New General User to an existing Admin Account
     * @description Link a New General User to an existing Admin Account. Requires role ROLE_CREATE_USER
     */
    post: operations['createLinkedGeneralUser']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/linkedprisonusers/admin': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Link an Admin User to an existing General Account
     * @description Link an Admin User to an existing General Account. Requires role ROLE_CREATE_USER
     */
    post: operations['createLinkedCentralAdminUser']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/groups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all groups
     * @description Get all groups, role required is ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
     */
    get: operations['getGroups']
    put?: never
    /**
     * Create group.
     * @description Create a group.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS
     */
    post: operations['createGroup']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/groups/child': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create child group.
     * @description Create a Child Group.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS
     */
    post: operations['createChildGroup']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/externalusers/{userId}/roles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of roles associated with the users account
     * @description Roles for a specific user.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS, ROLE_AUTH_GROUP_MANAGER or ROLE_MAINTAIN_IMS_USERS
     */
    get: operations['getUserRoles_1']
    put?: never
    /**
     * Add roles to user.
     * @description Add role to user, post version taking multiple roles<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS, ROLE_AUTH_GROUP_MANAGER or ROLE_MAINTAIN_IMS_USERS
     */
    post: operations['addRolesByUserId']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/externalusers/{userId}/email': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Amend a user email address.
     * @description Amend a user email address. Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
     */
    post: operations['alterUserEmail']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/externalusers/create': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create user
     * @description Create user. Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
     */
    post: operations['createUserByEmail']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/email-domains': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all email domains
     * @description Get all email domains, role required is ROLE_MAINTAIN_EMAIL_DOMAINS
     */
    get: operations['domainList']
    put?: never
    /**
     * Create email domain
     * @description Create a new email domain, role required is ROLE_MAINTAIN_EMAIL_DOMAINS
     */
    post: operations['addEmailDomain']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/allowlist/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Update a user's access on the allow list.
     * @description Update a user's access on the allow list
     */
    patch: operations['updateUserAccess']
    trace?: never
  }
  '/users/{username}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * User detail.
     * @description Find user detail by username.
     */
    get: operations['findUser']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/{username}/roles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of roles for user
     * @description List of roles for user. Currently restricted to service specific roles: ROLE_USER_PERMISSIONS__RO or ROLE_INTEL_ADMIN or ROLE_PF_USER_ADMIN or ROLE_PCMS_USER_ADMIN.<br/><br/>**Change to old endpoint in Auth** <br/> 1)  Nomis / Prison user doesn't return additional role in the list:  PRISON <br/>                                         2)  Delius user doesn't return additional role in the list:  PROBATION
     */
    get: operations['userRoles']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/{username}/email': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Email address for user
     * @description Verified email address for user
     */
    get: operations['getUserEmail']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Search for users
     * @description
     *           Search for users in the Auth DB only who match on partial first name, surname, username or email and return a pageable result set.
     *           Optionally choose the authentication sources from any combination of auth, delius, nomis and azuread sources.
     *           Provide the authSources as a list of values with the same name. e.g. ?authSources=nomis&authSources=delius&authSources=auth
     *           It will return users with the requested auth sources where they have authenticated against the auth service at least once.
     *           Note: User information held in the auth service may be out of date with the user information held in the source systems as
     *           their details will be as they were the last time that they authenticated.<br/><br/>
     *
     *            Requires role ROLE_INTEL_ADMIN or ROLE_PCMS_USER_ADMIN or ROLE_PF_USER_ADMIN
     *
     */
    get: operations['searchForUsersInMultipleSourceSystems']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * My User details.
     * @description Find my user details.
     */
    get: operations['myDetails']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me/roles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of roles for current user.
     * @description List of roles for current user.
     */
    get: operations['myRoles']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me/groups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * My Group details.
     * @description Find my location/group details. This should be accessed with user token.
     */
    get: operations['myGroupDetails']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me/email': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Email address for current user
     * @description Verified email address for current user
     */
    get: operations['myEmail']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me/caseloads': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of caseloads associated with the current user
     * @description Caseloads for the current user
     */
    get: operations['getMyCaseloads']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/allowlist/{username}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a user on the allow list.
     * @description Get a user on the allow list
     */
    get: operations['getAllowlistUser']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/roles/{role}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get role details
     * @description Get role details, role required is ROLE_ROLES_ADMIN
     */
    get: operations['getRoleDetail']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/roles/paged': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all paged roles
     * @description Get all paged roles, role required is ROLE_ROLES_ADMIN
     */
    get: operations['getPagedRoles']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/roles/delius': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of mapped delius roles
     * @description List of mapped  delius roles. Requires role ROLE_INTEL_ADMIN or ROLE_PCMS_USER_ADMIN or ROLE_PF_USER_ADMIN
     */
    get: operations['findMappedDeliusRoles']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisonusers/{username}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get specified user details
     * @description Information on a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES or ROLE_MANAGE_NOMIS_USER_ACCOUNT
     */
    get: operations['findUserByUsername']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisonusers/{username}/details': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get specified user details
     * @description Information on a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES or ROLE_MANAGE_NOMIS_USER_ACCOUNT
     */
    get: operations['getUserDetails']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisonusers/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all users filtered as specified
     * @description Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES. <br/>Get all users with filter.<br/> For local administrators this will implicitly filter users in the prisons they administer, therefore username is expected in the authorisation token. <br/>For users with role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN this allows access to all staff.
     */
    get: operations['getUsers']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisonusers/reference-data/caseloads': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieves all caseloads
     * @description Retrieves all the current active general caseloads, these are effectively prisons that staff can be associated with.
     */
    get: operations['getCaseload']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisonusers/find-by-caseload-and-role': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all users filtered by active caseload and role
     * @description Requires role USERS__PRISON_USERS__FIND_BY_CASELOAD_AND_ROLE__RO<br/>Get all users with active caseload and nomis role.<br/> This search does not limit by user token.
     */
    get: operations['getUsersByCaseloadAndRole']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisonusers/download': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['downloadUsersByFilters']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisonusers/download/admins': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['downloadPrisonAdminsByFilter']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/notification/banner/{page}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets Notification message
     * @description Message string to be displayed in the notification banner.
     */
    get: operations['getNotificationBannerMessage']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/externalusers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Search for a user.
     * @description Search for a user.
     */
    get: operations['searchForUser']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/externalusers/{username}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * User detail.
     * @description User detail.
     */
    get: operations['user']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/externalusers/{userId}/groups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get groups for userId.
     * @description Get groups for userId. Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER or ROLE_VIEW_USER_GROUPS
     */
    get: operations['getGroups_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/externalusers/{userId}/assignable-roles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of roles associated with the users account
     * @description Roles for a specific user. Requires role ROLE_MAINTAIN_OAUTH_USERS, ROLE_AUTH_GROUP_MANAGER, ROLE_MAINTAIN_IMS_USERS
     */
    get: operations['getAssignableRoles']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/externalusers/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Search for an external user. */
    get: operations['searchForUser_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/externalusers/me/searchable-roles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of searchable roles.
     * @description Get list of roles that can be search for by the current user.
     */
    get: operations['searchableRoles']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/externalusers/me/assignable-groups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of assignable groups.
     * @description Get list of groups that can be assigned by the current user.
     */
    get: operations['assignableGroups']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/externalusers/id/{userId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve user details by user id.
     * @description Retrieve detail by user id. Note that when accessing with Group Manager role the accessor must have a group in common with the user.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
     */
    get: operations['userById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/email-domains/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get email domain details
     * @description Get email domain details, role required is ROLE_MAINTAIN_EMAIL_DOMAINS
     */
    get: operations['domain']
    put?: never
    post?: never
    /**
     * Delete email domain details
     * @description Delete email domain details, role required is ROLE_MAINTAIN_EMAIL_DOMAINS
     */
    delete: operations['deleteEmailDomain']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisonusers/{username}/roles/{roleCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Remove a role from a user
     * @description The user must already have the role to be removed. Default role caseload is a DPS role unless specified. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
     */
    delete: operations['removeRoleFromUser']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisonusers/{username}/caseloads/{caseloadId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Remove a caseload from a user
     * @description The user must already have the caseload to be removed. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN
     */
    delete: operations['removeCaseload']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** @description Update Role Name */
    RoleNameAmendmentDto: {
      /**
       * @description Role Name
       * @example Auth Group Manager
       */
      roleName: string
    }
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      errors?: string[]
    }
    /** @description Update Role Description */
    RoleDescriptionAmendmentDto: {
      /**
       * @description Role Description
       * @example Allow Group Manager to administer the account within their groups
       */
      roleDescription: string
    }
    /** @description Update Role Administration Types */
    RoleAdminTypeAmendmentDto: {
      /**
       * @description Role Admin Type
       * @example [
       *       "DPS_ADM"
       *     ]
       */
      adminType: ('DPS_LSA' | 'DPS_ADM' | 'EXT_ADM')[]
    }
    /** @description Group Name */
    GroupAmendmentDto: {
      /**
       * @description Group Name
       * @example HDC NPS North East
       */
      groupName: string
    }
    /** @description The reason user made inactive. */
    DeactivateReason: {
      /**
       * @description Deactivate Reason
       * @example User has left
       */
      reason: string
    }
    /** @description The add user request */
    UserAllowlistAddRequest: {
      /** @description NOMIS, nDelius or auth username (can also be an email) */
      username: string
      /**
       * @description Email
       * @example kellianne.granados@justice.gov.uk
       */
      email: string
      /**
       * @description First name
       * @example Kellianne
       */
      firstName: string
      /**
       * @description Last name
       * @example Granados
       */
      lastName: string
      /**
       * @description A valid business reason for granting access to the environment
       * @example Access is required to allow updating roles on clients as part of the support team
       */
      reason: string
      /**
       * @description The access period required, this can also be used to expire the access if needed
       * @enum {string}
       */
      accessPeriod: 'EXPIRE' | 'ONE_MONTH' | 'THREE_MONTHS' | 'SIX_MONTHS' | 'TWELVE_MONTHS' | 'NO_RESTRICTION'
    }
    /** @description Details of the role to be created. */
    CreateRoleDto: {
      /**
       * @description Role Code
       * @example AUTH_GROUP_MANAGER
       */
      roleCode: string
      /**
       * @description roleName
       * @example Auth Group Manager
       */
      roleName: string
      /**
       * @description roleDescription
       * @example Allow Group Manager to administer the account within their groups
       */
      roleDescription?: string
      /**
       * @description adminType, can be used if multiple admin types required
       * @example [
       *       "EXT_ADM",
       *       "DPS_ADM"
       *     ]
       */
      adminType: ('DPS_LSA' | 'DPS_ADM' | 'EXT_ADM')[]
    }
    /** @description DPS User creation */
    CreateUserRequest: {
      /**
       * @description Username
       * @example TEST_USER
       */
      username: string
      /**
       * @description Email Address
       * @example test@justice.gov.uk
       */
      email: string
      /**
       * @description First name of the user
       * @example John
       */
      firstName: string
      /**
       * @description Last name of the user
       * @example Smith
       */
      lastName: string
      /**
       * @description The type of user
       * @example DPS_LSA
       * @enum {string}
       */
      userType: 'DPS_ADM' | 'DPS_GEN' | 'DPS_LSA'
      /**
       * @description Default caseload (a.k.a Prison ID)
       * @example BXI
       */
      defaultCaseloadId?: string
    }
    /** @description Prison User Created Details */
    NewPrisonUserDto: {
      /**
       * @description Username
       * @example TEST_USER
       */
      username: string
      /**
       * @description Email Address
       * @example test@justice.gov.uk
       */
      primaryEmail?: string
      /**
       * @description First name of the user
       * @example John
       */
      firstName: string
      /**
       * @description Last name of the user
       * @example Smith
       */
      lastName: string
    }
    /** @description Roles in caseload information */
    CaseloadRoleDetail: {
      /** @description Caseload for the listed roles */
      caseload: components['schemas']['PrisonCaseload']
      /** @description NOMIS Roles assigned to this user */
      roles: components['schemas']['RoleDetail'][]
    }
    PrisonCaseload: {
      /**
       * @description identify for caseload
       * @example WWI
       */
      id: string
      /**
       * @description name of caseload, typically prison name
       * @example WANDSWORTH (HMP)
       */
      name: string
    }
    /** @description Role Information */
    RoleDetail: {
      /**
       * @description Role Code
       * @example GLOBAL_SEARCH
       */
      code: string
      /**
       * @description Role Name
       * @example Global Search Role
       */
      name: string
      /**
       * Format: int32
       * @description Role Sequence
       * @default 1
       * @example 1
       */
      sequence: number
      /**
       * @description Role Type
       * @default APP
       * @example APP
       * @enum {string}
       */
      type: 'APP' | 'INST' | 'COMM' | 'SHG'
      /**
       * @description Admin only role
       * @default false
       * @example true
       */
      adminRoleOnly: boolean
      /**
       * @description Parent Role Code
       * @example GLOBAL_SEARCH
       */
      parentRole?: components['schemas']['RoleDetail']
    }
    /** @description User & Role Information */
    UserRoleDetail: {
      /**
       * @description Username
       * @example TESTUSER1
       */
      username: string
      /**
       * @description Indicates that the user is active
       * @example true
       */
      active: boolean
      /**
       * @description Type of user account
       * @example GENERAL
       * @enum {string}
       */
      accountType: 'GENERAL' | 'ADMIN'
      /**
       * @description Active Caseload of the user
       * @example BXI
       */
      activeCaseload?: components['schemas']['PrisonCaseload']
      /** @description DPS Roles assigned to this user */
      dpsRoles: components['schemas']['RoleDetail'][]
      /** @description NOMIS Roles assigned to this user per caseload */
      nomisRoles?: components['schemas']['CaseloadRoleDetail'][]
    }
    AmendEmail: {
      /**
       * @description Email address
       * @example prison.user@someagency.justice.gov.uk
       */
      email: string
    }
    /** @description User & Caseload Information */
    UserCaseloadDetail: {
      /**
       * @description Username
       * @example TESTUSER1
       */
      username: string
      /**
       * @description Indicates that the user is active
       * @example true
       */
      active: boolean
      /**
       * @description Type of user account
       * @example GENERAL
       * @enum {string}
       */
      accountType: 'GENERAL' | 'ADMIN'
      /**
       * @description Active Caseload of the user
       * @example BXI
       */
      activeCaseload?: components['schemas']['PrisonCaseload']
      /** @description Caseloads available for this user */
      caseloads: components['schemas']['PrisonCaseload'][]
    }
    /** @description Linking a new Local admin account to an existing general user */
    CreateLinkedLocalAdminUserRequest: {
      /**
       * @description existingUsername
       * @example TESTUSER1
       */
      existingUsername: string
      /**
       * @description adminUsername
       * @example TESTUSER1_ADM
       */
      adminUsername: string
      /**
       * @description Default local admin group (prison) to manage users
       * @example MDI
       */
      localAdminGroup: string
    }
    PrisonCaseloadDto: {
      /**
       * @description ID for the caseload
       * @example WWI
       */
      id: string
      /**
       * @description name of caseload, typically prison name
       * @example WANDSWORTH (HMP)
       */
      name: string
    }
    /** @description Prison Staff Information */
    PrisonStaffUserDto: {
      /**
       * Format: int64
       * @description Staff ID
       * @example 324323
       */
      staffId: number
      /**
       * @description First name of the user
       * @example John
       */
      firstName: string
      /**
       * @description Last name of the user
       * @example Smith
       */
      lastName: string
      /**
       * @description Status of staff account
       * @example ACTIVE
       */
      status: string
      /**
       * @description Email addresses of staff
       * @example test@test.com
       */
      primaryEmail?: string
      /** @description General user account for this staff member */
      generalAccount?: components['schemas']['UserCaseloadDto']
      /** @description Admin user account for this staff member */
      adminAccount?: components['schemas']['UserCaseloadDto']
    }
    /** @description User & Caseload Information */
    UserCaseloadDto: {
      /**
       * @description User name
       * @example John1
       */
      username: string
      /**
       * @description Indicates that the user is active or not
       * @example true
       */
      active: boolean
      /**
       * @description Type of user account
       * @example GENERAL
       * @enum {string}
       */
      accountType: 'GENERAL' | 'ADMIN'
      /**
       * @description Active Caseload of the user
       * @example BXI
       */
      activeCaseload?: components['schemas']['PrisonCaseloadDto']
      /** @description Caseloads available for this user */
      caseloads?: components['schemas']['PrisonCaseloadDto'][]
    }
    /** @description Linking a new General account to an existing admin user account */
    CreateLinkedGeneralUserRequest: {
      /**
       * @description existing admin username
       * @example TESTUSER1_ADM
       */
      existingAdminUsername: string
      /**
       * @description new general username
       * @example TESTUSER1_GEN
       */
      generalUsername: string
      /**
       * @description Default caseload (a.k.a Prison ID), not required for admin accounts
       * @example BXI
       */
      defaultCaseloadId: string
    }
    /** @description Linking a new Central admin account to an existing general user */
    CreateLinkedCentralAdminUserRequest: {
      /**
       * @description existingUsername
       * @example TESTUSER1
       */
      existingUsername: string
      /**
       * @description adminUsername
       * @example TESTUSER1_ADM
       */
      adminUsername: string
    }
    CreateGroupDto: {
      /**
       * @description Group Code
       * @example HDC_NPS_NE
       */
      groupCode: string
      /**
       * @description groupName
       * @example HDC NPS North East
       */
      groupName: string
    }
    CreateChildGroupDto: {
      /**
       * @description Parent Group Code
       * @example HNC_NPS
       */
      parentGroupCode: string
      /**
       * @description Group Code
       * @example HDC_NPS_NE
       */
      groupCode: string
      /**
       * @description groupName
       * @example HDC NPS North East
       */
      groupName: string
    }
    AmendUser: {
      /**
       * @description Email address
       * @example nomis.user@someagency.justice.gov.uk
       */
      email: string
    }
    /** @description Details of the user to be created. */
    NewUser: {
      /**
       * @description Email address
       * @example nomis.user@someagency.justice.gov.uk
       */
      email: string
      /**
       * @description First name
       * @example Nomis
       */
      firstName: string
      /**
       * @description Last name
       * @example User
       */
      lastName: string
      /**
       * @description Initial groups, can be used for one or more initial groups
       * @example [
       *       "SITE_1_GROUP_1",
       *       "SITE_1_GROUP_2"
       *     ]
       */
      groupCodes?: string[]
    }
    CreateEmailDomainDto: {
      /**
       * @description Email domain
       * @example careuk.com
       */
      name: string
      /**
       * @description Email domain description
       * @example CAREUK
       */
      description?: string
    }
    EmailDomainDto: {
      /** @description Email domain id */
      id: string
      /**
       * @description Email domain
       * @example careuk.com
       */
      domain: string
      /**
       * @description Email domain description
       * @example CAREUK
       */
      description: string
    }
    /** @description The update user request */
    UserAllowlistPatchRequest: {
      /**
       * @description A valid business reason for granting access to the environment
       * @example Access is required to allow updating roles on clients as part of the support team
       */
      reason: string
      /**
       * @description The access period required, this can also be used to expire the access if needed
       * @enum {string}
       */
      accessPeriod: 'EXPIRE' | 'ONE_MONTH' | 'THREE_MONTHS' | 'SIX_MONTHS' | 'TWELVE_MONTHS' | 'NO_RESTRICTION'
    }
    /** @description User Details */
    UserDetailsDto: {
      /**
       * @description Username
       * @example DEMO_USER1
       */
      username: string
      /**
       * @description Active
       * @example false
       */
      active: boolean
      /**
       * @description Name
       * @example John Smith
       */
      name: string
      /**
       * Authentication Source
       * @description auth for external users, nomis for nomis authenticated users
       * @example nomis
       * @enum {string}
       */
      authSource: 'auth' | 'azuread' | 'delius' | 'nomis' | 'none'
      /**
       * Staff Id
       * Format: int64
       * @deprecated
       * @description Deprecated, use userId instead
       * @example 231232
       */
      staffId?: number
      /**
       * Current Active Caseload
       * @deprecated
       * @description Deprecated, retrieve from prison API rather than manage users
       * @example MDI
       */
      activeCaseLoadId?: string
      /**
       * User Id
       * @description Unique identifier for user, will be UUID for external users or staff ID for nomis users
       * @example 231232
       */
      userId: string
      /**
       * Unique Id
       * Format: uuid
       * @description Universally unique identifier for user, generated and stored in auth database for all users
       * @example 5105a589-75b3-4ca0-9433-b96228c1c8f3
       */
      uuid?: string
    }
    /** @description User Role */
    UserRole: {
      /**
       * @description Role Code
       * @example GLOBAL_SEARCH
       */
      roleCode: string
    }
    /** @description User email details */
    EmailAddressDto: {
      /**
       * @description Username
       * @example DEMO_USER1
       */
      username: string
      /**
       * @description Email
       * @example john.smith@digital.justice.gov.uk
       */
      email?: string
      /**
       * @description Verified email
       * @example true
       */
      verified: boolean
    }
    ErrorDetail: {
      /**
       * @description Error
       * @example Not Found
       */
      error: string
      /**
       * @description Error description
       * @example User not found.
       */
      error_description: string
      /**
       * @description Field in error
       * @example username
       */
      field?: string
    }
    AuthUserDto: {
      /**
       * @description User ID
       * @example 91229A16-B5F4-4784-942E-A484A97AC865
       */
      userId?: string
      /**
       * @description Username
       * @example externaluser
       */
      username?: string
      /**
       * @description Email address
       * @example external.user@someagency.justice.gov.uk
       */
      email?: string
      /**
       * @description First name
       * @example External
       */
      firstName?: string
      /**
       * @description Last name
       * @example User
       */
      lastName?: string
      /**
       * @description Account is locked due to incorrect password attempts
       * @example true
       */
      locked: boolean
      /**
       * @description Account is enabled
       * @example false
       */
      enabled: boolean
      /**
       * @description Email address has been verified
       * @example false
       */
      verified: boolean
      /**
       * Format: date-time
       * @description Last time user logged in
       * @example 01/01/2001
       */
      lastLoggedIn: string
      /**
       * @description Authentication source
       * @example delius
       */
      source: string
    }
    PageDetails: {
      sort: components['schemas']['PageSort']
      /** Format: int32 */
      offset: number
      /** Format: int32 */
      pageNumber: number
      /** Format: int32 */
      pageSize: number
      paged: boolean
      unpaged: boolean
    }
    PageSort: {
      sorted: boolean
      unsorted: boolean
      empty: boolean
    }
    PagedResponseAuthUserDto: {
      content: components['schemas']['AuthUserDto'][]
      pageable: components['schemas']['PageDetails']
      last: boolean
      /** Format: int32 */
      totalPages: number
      /** Format: int64 */
      totalElements: number
      /** Format: int32 */
      size: number
      /** Format: int32 */
      number: number
      sort: components['schemas']['PageSort']
      /** Format: int32 */
      numberOfElements: number
      first: boolean
      empty: boolean
    }
    User: {
      username: string
    }
    /** @description User Role */
    ExternalUserRole: {
      /**
       * @description Role Code
       * @example GLOBAL_SEARCH
       */
      roleCode: string
    }
    /** @description User Group */
    UserGroupDto: {
      /**
       * @description Group Code
       * @example HDC_NPS_NE
       */
      groupCode: string
      /**
       * @description Group Name
       * @example HDC NPS North East
       */
      groupName: string
    }
    Pageable: {
      /** Format: int32 */
      page?: number
      /** Format: int32 */
      size?: number
      sort?: string[]
    }
    PagedResponseUserAllowlistDetail: {
      content: components['schemas']['UserAllowlistDetail'][]
      pageable: components['schemas']['PageDetails']
      last: boolean
      /** Format: int32 */
      totalPages: number
      /** Format: int64 */
      totalElements: number
      /** Format: int32 */
      size: number
      /** Format: int32 */
      number: number
      sort: components['schemas']['PageSort']
      /** Format: int32 */
      numberOfElements: number
      first: boolean
      empty: boolean
    }
    /** @description Allow list user details */
    UserAllowlistDetail: {
      /**
       * Format: uuid
       * @description The UUID of the allow list user
       * @example e287a472-700a-4523-8565-578147667966
       */
      id: string
      /** @description NOMIS, nDelius or auth username (can also be an email) */
      username: string
      /**
       * @description First name
       * @example Kellianne
       */
      firstName: string
      /**
       * @description Last name
       * @example Granados
       */
      lastName: string
      /**
       * @description Email
       * @example kellianne.granados@justice.gov.uk
       */
      email: string
      /**
       * @description A valid business reason for granting access to the environment
       * @example Access is required to allow updating roles on clients as part of the support team
       */
      reason: string
      /**
       * Format: date-time
       * @description The timestamp the user was added to the allow list
       * @example 04/08/2013T15:53:38.506
       */
      createdOn: string
      /**
       * Format: date
       * @description The date the user's access will expire'
       * @example 04/08/2013
       */
      allowlistEndDate: string
      /**
       * Format: date-time
       * @description The timestamp the allow list user was last updated
       * @example 04/08/2013T15:53:38.506
       */
      lastUpdated: string
      /**
       * @description The logged in username to last update this allow list user
       * @example SYNDYRBP1
       */
      lastUpdatedBy: string
    }
    AdminTypeReturn: {
      adminTypeCode: string
      adminTypeName: string
    }
    /** @description Role Details */
    RoleDto: {
      /**
       * @description Role Code
       * @example AUTH_GROUP_MANAGER
       */
      roleCode: string
      /**
       * @description Role Name
       * @example Auth Group Manager
       */
      roleName: string
      /**
       * @description Role Description
       * @example Allow Group Manager to administer the account within their groups
       */
      roleDescription: string
      /** @description Administration Type */
      adminType: components['schemas']['AdminTypeReturn'][]
    }
    PagedResponseRoleDto: {
      content: components['schemas']['RoleDto'][]
      pageable: components['schemas']['PageDetails']
      last: boolean
      /** Format: int32 */
      totalPages: number
      /** Format: int64 */
      totalElements: number
      /** Format: int32 */
      size: number
      /** Format: int32 */
      number: number
      sort: components['schemas']['PageSort']
      /** Format: int32 */
      numberOfElements: number
      first: boolean
      empty: boolean
    }
    PrisonUserDto: {
      /** @example RO_USER_TEST */
      username: string
      /**
       * Format: int64
       * @example 1234564789
       */
      staffId: number
      /** @example ryanorton@justice.gov.uk */
      email?: string
      /** @example true */
      verified: boolean
      /** @example Ryan */
      firstName: string
      /** @example Orton */
      lastName: string
      /** @example Ryan Orton */
      name: string
      /** @example MDI */
      activeCaseLoadId?: string
    }
    /** @description Prison User Information */
    PrisonUserDetails: {
      /**
       * @description Username
       * @example testuser1
       */
      username: string
      /**
       * Format: int64
       * @description Staff ID
       * @example 324323
       */
      staffId: number
      /**
       * @description First name of the user
       * @example John
       */
      firstName: string
      /**
       * @description Last name of the user
       * @example Smith
       */
      lastName: string
      /**
       * @description Active Caseload of the user
       * @example BXI
       */
      activeCaseloadId?: string
      /**
       * @description Status of the user
       * @example OPEN
       * @enum {string}
       */
      accountStatus?:
        | 'OPEN'
        | 'EXPIRED'
        | 'EXPIRED_GRACE'
        | 'LOCKED_TIMED'
        | 'LOCKED'
        | 'EXPIRED_LOCKED_TIMED'
        | 'EXPIRED_GRACE_LOCKED_TIMED'
        | 'EXPIRED_LOCKED'
        | 'EXPIRED_GRACE_LOCKED'
      /**
       * @description Type of user account
       * @example GENERAL
       * @enum {string}
       */
      accountType: 'GENERAL' | 'ADMIN'
      /**
       * @description Email addresses of user
       * @example test@test.com
       */
      primaryEmail?: string
      /** @description List of associated DPS Role Codes */
      dpsRoleCodes?: string[]
      /** @description List of user groups administered */
      administratorOfUserGroups?: components['schemas']['PrisonUserGroupDetail'][]
      /** @description Account is not locked */
      accountNonLocked?: boolean
      /** @description Credentials are not expired flag */
      credentialsNonExpired?: boolean
      /** @description User is enabled flag */
      enabled: boolean
      /** @description User is admin flag */
      admin?: boolean
      /** @description User is active flag */
      active: boolean
      /**
       * @description Staff Status
       * @example ACTIVE
       */
      staffStatus?: string
      /**
       * Format: date-time
       * @description Last logon date
       * @example 2023-01-01T12:13:14.123
       */
      lastLogonDate?: string
      /** Format: int64 */
      userId: number
      name: string
      /** @enum {string} */
      authSource: 'auth' | 'azuread' | 'delius' | 'nomis' | 'none'
    }
    /** @description User Group Information */
    PrisonUserGroupDetail: {
      id: string
      name: string
    }
    PagedResponsePrisonUserSearchSummary: {
      content: components['schemas']['PrisonUserSearchSummary'][]
      pageable: components['schemas']['PageDetails']
      last: boolean
      /** Format: int32 */
      totalPages: number
      /** Format: int64 */
      totalElements: number
      /** Format: int32 */
      size: number
      /** Format: int32 */
      number: number
      sort: components['schemas']['PageSort']
      /** Format: int32 */
      numberOfElements: number
      first: boolean
      empty: boolean
    }
    PrisonUserSearchSummary: {
      username: string
      /** Format: int32 */
      staffId: number
      firstName: string
      lastName: string
      active: boolean
      status?: string
      locked: boolean
      expired: boolean
      activeCaseload?: components['schemas']['PrisonCaseload']
      /** Format: int32 */
      dpsRoleCount: number
      email?: string
      staffStatus: string
    }
    PrisonUserSummary: {
      username: string
      staffId: string
      firstName: string
      lastName: string
      active: boolean
      activeCaseload?: components['schemas']['PrisonCaseload']
      email?: string
    }
    /** @description Summary User Information with Email Address */
    PrisonAdminUserSummary: {
      username: string
      /** Format: int64 */
      staffId: number
      firstName: string
      lastName: string
      active: boolean
      /** @enum {string} */
      status?:
        | 'OPEN'
        | 'EXPIRED'
        | 'EXPIRED_GRACE'
        | 'LOCKED_TIMED'
        | 'LOCKED'
        | 'EXPIRED_LOCKED_TIMED'
        | 'EXPIRED_GRACE_LOCKED_TIMED'
        | 'EXPIRED_LOCKED'
        | 'EXPIRED_GRACE_LOCKED'
      locked: boolean
      expired: boolean
      activeCaseload?: components['schemas']['PrisonCaseload']
      /** Format: int32 */
      dpsRoleCount: number
      email?: string
      groups: components['schemas']['PrisonUserGroupDetail'][]
      staffStatus?: string
    }
    /** @description Notification message */
    NotificationMessage: {
      /**
       * @description Message
       * @example Message string to be displayed in the notification banner
       */
      message: string
    }
    /** @description Group Details */
    GroupDetailsDto: {
      /**
       * @description Group Code
       * @example HDC_NPS_NE
       */
      groupCode: string
      /**
       * @description Group Name
       * @example HDC NPS North East
       */
      groupName: string
      /** @description Assignable Roles */
      assignableRoles: components['schemas']['UserAssignableRoleDto'][]
      /** @description Child Groups */
      children: components['schemas']['UserGroupDto'][]
    }
    /** @description User Role */
    UserAssignableRoleDto: {
      /**
       * @description Role Code
       * @example LICENCE_RO
       */
      roleCode: string
      /**
       * @description Role Name
       * @example Licence Responsible Officer
       */
      roleName: string
      /**
       * @description automatic
       * @example TRUE
       */
      automatic: boolean
    }
    /** @description Group Details */
    ChildGroupDetailsDto: {
      /**
       * @description Group Code
       * @example HDC_NPS_NE
       */
      groupCode: string
      /**
       * @description Group Name
       * @example HDC NPS North East
       */
      groupName: string
    }
    ExternalUser: {
      /** Format: uuid */
      userId: string
      username: string
      email: string
      firstName: string
      lastName: string
      locked: boolean
      enabled: boolean
      verified: boolean
      /** Format: date-time */
      lastLoggedIn?: string
      inactiveReason?: string
      /** @enum {string} */
      authSource: 'auth' | 'azuread' | 'delius' | 'nomis' | 'none'
    }
    ExternalUserDetailsDto: {
      /**
       * Format: uuid
       * @description User ID
       * @example 91229A16-B5F4-4784-942E-A484A97AC865
       */
      userId: string
      /**
       * @description Username
       * @example externaluser
       */
      username: string
      /**
       * @description Email address
       * @example external.user@someagency.justice.gov.uk
       */
      email?: string
      /**
       * @description First name
       * @example External
       */
      firstName: string
      /**
       * @description Last name
       * @example User
       */
      lastName: string
      /**
       * @description Account is locked due to incorrect password attempts
       * @example true
       */
      locked: boolean
      /**
       * @description Account is enabled
       * @example false
       */
      enabled: boolean
      /**
       * @description Email address has been verified
       * @example false
       */
      verified: boolean
      /**
       * Format: date-time
       * @description Last time user logged in
       * @example 01/01/2001
       */
      lastLoggedIn: string
      /**
       * @description Inactive reason
       * @example Left department
       */
      inactiveReason: string
    }
    PagedResponseExternalUserDetailsDto: {
      content: components['schemas']['ExternalUserDetailsDto'][]
      pageable: components['schemas']['PageDetails']
      last: boolean
      /** Format: int32 */
      totalPages: number
      /** Format: int64 */
      totalElements: number
      /** Format: int32 */
      size: number
      /** Format: int32 */
      number: number
      sort: components['schemas']['PageSort']
      /** Format: int32 */
      numberOfElements: number
      first: boolean
      empty: boolean
    }
    UserGroup: {
      groupCode: string
      groupName: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  amendRoleName: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The Role code of the role.
         * @example AUTH_GROUP_MANAGER
         */
        roleCode: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RoleNameAmendmentDto']
      }
    }
    responses: {
      /** @description Role name updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The role trying to update does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  amendRoleDescription: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The Role code of the role.
         * @example AUTH_GROUP_MANAGER
         */
        roleCode: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RoleDescriptionAmendmentDto']
      }
    }
    responses: {
      /** @description Role description updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The role trying to update does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  amendRoleAdminType: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The Role code of the role.
         * @example AUTH_GROUP_MANAGER
         */
        roleCode: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RoleAdminTypeAmendmentDto']
      }
    }
    responses: {
      /** @description Role admin type updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The role trying to update does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  enableUser: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Username
         * @example testuser1
         */
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description User account unlocked */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Incorrect request to unlock user */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to unlock a user */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  disableUser: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Username
         * @example testuser1
         */
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description User account locked */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Incorrect request to lock user */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to lock a user */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getGroupDetail: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The group code of the group. */
        group: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['GroupDetailsDto']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Group not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  amendGroupName: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The group code of the group. */
        group: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GroupAmendmentDto']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Group not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteGroup: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The group code of the group. */
        group: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Group not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getChildGroupDetail: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The group code of the child group. */
        group: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ChildGroupDetailsDto']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Child Group not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  amendChildGroupName: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The group code of the child group. */
        group: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GroupAmendmentDto']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Child Group not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteChildGroup: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The group code of the child group. */
        group: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Child Group not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addRoleByUserId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The userId of the user. */
        userId: string
        /** @description The role to be added to the user. */
        role: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Added. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Role for user already exists. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  removeRoleByUserId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The userId of the user. */
        userId: string
        /** @description The role code of the role to be deleted from the user. */
        role: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addGroupByUserId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The userId of the user. */
        userId: string
        /** @description The group code of the group to be added to the user. */
        group: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Added */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Group for user already exists. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  removeGroupByUserId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The userId of the user. */
        userId: string
        /** @description The group code of the group to be deleted from the user. */
        group: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  enableUserByUserId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The userId of the user. */
        userId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  disableUserByUserId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The userId of the user. */
        userId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DeactivateReason']
      }
    }
    responses: {
      /** @description OK. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllAllowlistUsers: {
    parameters: {
      query: {
        /** @description username, email, first name or last name filter */
        name?: string
        /** @description Expired or Active filter */
        status?: 'ACTIVE' | 'EXPIRED' | 'ALL'
        pageable: components['schemas']['Pageable']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PagedResponseUserAllowlistDetail']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The allow list user does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addUser: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserAllowlistAddRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getRoles: {
    parameters: {
      query?: {
        adminTypes?: ('DPS_LSA' | 'DPS_ADM' | 'EXT_ADM')[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RoleDto'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createRole: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateRoleDto']
      }
    }
    responses: {
      /** @description Role Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  findUsersByFirstAndLastName: {
    parameters: {
      query: {
        /** @description The first name to match. Case insensitive. */
        firstName: string
        /** @description The last name to match. Case insensitive */
        lastName: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonUserDto'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createUser: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateUserRequest']
      }
    }
    responses: {
      /** @description Create a DPS user */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NewPrisonUserDto']
        }
      }
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NewPrisonUserDto']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getUserRoles: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Username
         * @example TEST_USER1
         */
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserRoleDetail']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addRoles: {
    parameters: {
      query?: {
        /**
         * @description Caseload Id
         * @example NWEB
         */
        caseloadId?: string
      }
      header?: never
      path: {
        /**
         * @description Username of the account to add roles
         * @example TEST_USER2
         */
        username: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description User information with role details */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserRoleDetail']
        }
      }
      /** @description Incorrect request to add a role to a user account */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to add a role to this account */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  amendUserEmail: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The username of the user. */
        username: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AmendEmail']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': string
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  syncUserEmail: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The username of the user. */
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getUserCaseloads: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Username
         * @example TEST_USER1
         */
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description User caseload list */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserCaseloadDetail']
        }
      }
      /** @description Incorrect request to get caseloads for a user */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get a caseload for a user */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addCaseloads: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Username of the account to add caseloads
         * @example TEST_USER2
         */
        username: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description User information with caseload details */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserCaseloadDetail']
        }
      }
      /** @description Incorrect request to add caseloads to a user account */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to add caseloads to account */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createLinkedLocalAdminUser: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateLinkedLocalAdminUserRequest']
      }
    }
    responses: {
      /** @description Local Admin User linked to an existing General Account */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonStaffUserDto']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createLinkedGeneralUser: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateLinkedGeneralUserRequest']
      }
    }
    responses: {
      /** @description General User linked to an existing Admin Account */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonStaffUserDto']
        }
      }
      /** @description Incorrect request to link a general user to an admin user */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint, requires a valid OAuth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to link a general user to an existing admin user */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createLinkedCentralAdminUser: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateLinkedCentralAdminUserRequest']
      }
    }
    responses: {
      /** @description Admin User linked to an existing General Account */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonStaffUserDto']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getGroups: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description All Groups Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserGroupDto'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createGroup: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateGroupDto']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Group already exists. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createChildGroup: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateChildGroupDto']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Child Group already exists. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getUserRoles_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The userId of the user. */
        userId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserRole'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addRolesByUserId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The user Id of the user. */
        userId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Role(s) for user already exists.. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  alterUserEmail: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The ID of the user. */
        userId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AmendUser']
      }
    }
    responses: {
      /** @description OK. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': string
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createUserByEmail: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NewUser']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': Record<string, never>
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User or email already exists. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  domainList: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['EmailDomainDto'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addEmailDomain: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateEmailDomainDto']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['EmailDomainDto']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Email domain already exists */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateUserAccess: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The ID of the allow list user. */
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserAllowlistPatchRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The allow list user does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  findUser: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The username of the user. */
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['UserDetailsDto']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  userRoles: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The username of the user. */
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['UserRole'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getUserEmail: {
    parameters: {
      query?: {
        /** @description Return unverified email addresses. */
        unverified?: boolean
      }
      header?: never
      path: {
        /** @description The username of the user. */
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': Record<string, never>
        }
      }
      /** @description The user's email address */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EmailAddressDto']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. The user doesn't exist so could have never logged in */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorDetail']
        }
      }
    }
  }
  searchForUsersInMultipleSourceSystems: {
    parameters: {
      query?: {
        /**
         * @description The username, email or name of the user.
         * @example j smith
         */
        name?: string
        /** @description User status to find ACTIVE, INACTIVE or ALL. Defaults to ALL if omitted. */
        status?: 'ACTIVE' | 'INACTIVE' | 'ALL'
        /** @description List of auth sources to search [nomis|delius|auth|azuread]. Defaults to auth if omitted. */
        authSources?: ('auth' | 'azuread' | 'delius' | 'nomis' | 'none')[]
        page?: number
        size?: number
        sort?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PagedResponseAuthUserDto']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  myDetails: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['User']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  myRoles: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ExternalUserRole'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  myGroupDetails: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['UserGroupDto'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  myEmail: {
    parameters: {
      query?: {
        /** @description Return unverified email addresses. */
        unverified?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': Record<string, never>
        }
      }
      /** @description No content.  No verified email address found for user */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': Record<string, never>
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMyCaseloads: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['UserCaseloadDetail']
        }
      }
    }
  }
  getAllowlistUser: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The username of the allow list user. */
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserAllowlistDetail']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The allow list user does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getRoleDetail: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The Role code of the role.
         * @example AUTH_GROUP_MANAGER
         */
        role: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RoleDto']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPagedRoles: {
    parameters: {
      query?: {
        page?: number
        size?: number
        sort?: string
        roleName?: string
        roleCode?: string
        adminTypes?: ('DPS_LSA' | 'DPS_ADM' | 'EXT_ADM')[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PagedResponseRoleDto']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  findMappedDeliusRoles: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': {
            [key: string]: string[]
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  findUserByUsername: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The username of the user. */
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NewPrisonUserDto']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getUserDetails: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Username
         * @example testuser1
         */
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description User Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonUserDetails']
        }
      }
      /** @description Incorrect request to get user information */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get a user */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getUsers: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by name (first name and/or last name in any order), username or email address.
         * @example Raj
         */
        nameFilter?: string
        /**
         * @description Filter will match users that have all DPS role specified
         * @example ADD_SENSITIVE_CASE_NOTES
         */
        accessRoles?: string[]
        /**
         * @description Filter will match users that have the NOMIS role specified, should be used with a caseloadId or will get duplicates
         * @example 201
         */
        nomisRole?: string
        /**
         * @description Limit to active / inactive / show all users
         * @example INACTIVE
         */
        status?: 'ALL' | 'ACTIVE' | 'INACTIVE'
        /**
         * @description Filter results by user's currently active caseload i.e. the one they have currently selected
         * @example MDI
         */
        activeCaseload?: string
        /**
         * @description Filter results to include only those users that have access to the specified caseload (irrespective of whether it is currently active or not
         * @example MDI
         */
        caseload?: string
        /**
         * @description Returns result inclusive of selected roles
         * @example true
         */
        inclusiveRoles?: boolean
        /**
         * @description Returns all active LSAs
         * @example true
         */
        showOnlyLSAs?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Pageable list of user summaries */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PagedResponsePrisonUserSearchSummary']
        }
      }
      /** @description Incorrect filter supplied */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCaseload: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getUsersByCaseloadAndRole: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by user's currently active caseload i.e. the one they have currently selected
         * @example MDI
         */
        activeCaseload: string
        /**
         * @description Filter will match users that have the DPS role specified
         * @example ADD_SENSITIVE_CASE_NOTES
         */
        roleCode: string
        /**
         * @description Limit to active / inactive / show all users
         * @example INACTIVE
         */
        status?: 'ALL' | 'ACTIVE' | 'INACTIVE'
        /** @description If 'activeCaseloadOnly' is provided and True search for users with the target caseloadId irrespective of whether it is currently active or not. The default behaviour is to search for users where the target caseloadId is currently active. */
        activeCaseloadOnly?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Pageable list of user summaries */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PagedResponsePrisonUserSearchSummary']
        }
      }
      /** @description Incorrect filter supplied */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  downloadUsersByFilters: {
    parameters: {
      query?: {
        /**
         * @description Filter results by name (first name and/or last name in any order), username or email address.
         * @example Raj
         */
        nameFilter?: string
        /**
         * @description Filter will match users that have all DPS role specified
         * @example ADD_SENSITIVE_CASE_NOTES
         */
        accessRoles?: string[]
        /**
         * @description Filter will match users that have the NOMIS role specified, should be used with a caseloadId or will get duplicates
         * @example 201
         */
        nomisRole?: string
        /**
         * @description Limit to active / inactive / show all users
         * @example INACTIVE
         */
        status?: 'ALL' | 'ACTIVE' | 'INACTIVE'
        /**
         * @description Filter results by user's currently active caseload i.e. the one they have currently selected
         * @example MDI
         */
        activeCaseload?: string
        /**
         * @description Filter results to include only those users that have access to the specified caseload (irrespective of whether it is currently active or not
         * @example MDI
         */
        caseload?: string
        /**
         * @description Returns result inclusive of selected roles
         * @example true
         */
        inclusiveRoles?: boolean
        /**
         * @description Returns all active LSAs
         * @example true
         */
        showOnlyLSAs?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PrisonUserSummary'][]
        }
      }
    }
  }
  downloadPrisonAdminsByFilter: {
    parameters: {
      query?: {
        /**
         * @description Filter results by name (first name and/or last name in any order), username or email address.
         * @example Raj
         */
        nameFilter?: string
        /**
         * @description Filter will match users that have all DPS role specified
         * @example ADD_SENSITIVE_CASE_NOTES
         */
        accessRoles?: string[]
        /**
         * @description Filter will match users that have the NOMIS role specified, should be used with a caseloadId or will get duplicates
         * @example 201
         */
        nomisRole?: string
        /**
         * @description Limit to active / inactive / show all users
         * @example INACTIVE
         */
        status?: 'ALL' | 'ACTIVE' | 'INACTIVE'
        /**
         * @description Filter results by user's currently active caseload i.e. the one they have currently selected
         * @example MDI
         */
        activeCaseload?: string
        /**
         * @description Filter results to include only those users that have access to the specified caseload (irrespective of whether it is currently active or not
         * @example MDI
         */
        caseload?: string
        /**
         * @description Returns result inclusive of selected roles
         * @example true
         */
        inclusiveRoles?: boolean
        /**
         * @description Returns all active LSAs
         * @example true
         */
        showOnlyLSAs?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PrisonAdminUserSummary'][]
        }
      }
    }
  }
  getNotificationBannerMessage: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The notification page
         * @example roles
         */
        page: 'ROLES' | 'EMPTY' | 'DPSMENU'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NotificationMessage']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  searchForUser: {
    parameters: {
      query: {
        /** @description The email address of the user. */
        email: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': Record<string, never>
        }
      }
      /** @description No users found. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  user: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The username of the user. */
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ExternalUser']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getGroups_1: {
    parameters: {
      query?: {
        /** @description Whether groups are expanded into their children. */
        children?: boolean
      }
      header?: never
      path: {
        /** @description The userId of the user. */
        userId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['UserGroupDto'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAssignableRoles: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The userId of the user. */
        userId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserRole'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  searchForUser_1: {
    parameters: {
      query?: {
        /**
         * @description The username, email or name of the user.
         * @example j smith
         */
        name?: string
        /** @description The role codes of the user. */
        roles?: string[]
        /** @description The group codes of the user. */
        groups?: string[]
        /** @description Limit to active / inactive / show all users. */
        status?: 'ACTIVE' | 'INACTIVE' | 'ALL'
        page?: number
        size?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PagedResponseExternalUserDetailsDto']
        }
      }
      /** @description Unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  searchableRoles: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserRole'][]
        }
      }
      /** @description Unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  assignableGroups: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['UserGroup'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  userById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the user. */
        userId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ExternalUserDetailsDto']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  domain: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['EmailDomainDto']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Email domain not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteEmailDomain: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Email domain details deleted */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Email domain not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  removeRoleFromUser: {
    parameters: {
      query?: {
        /**
         * @description Caseload Id
         * @example NWEB
         */
        caseloadId?: string
      }
      header?: never
      path: {
        /**
         * @description Username of the account to remove role
         * @example TEST_USER2
         */
        username: string
        /**
         * @description Role Code
         * @example GLOBAL_SEARCH
         */
        roleCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description User information with role details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserRoleDetail']
        }
      }
      /** @description Incorrect request to remove a role from a user account */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to remove a role this user account */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  removeCaseload: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Username to remove caseload from
         * @example TEST_USER2
         */
        username: string
        /**
         * @description Caseload ID to remove from this user
         * @example LEI
         */
        caseloadId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description User information with caseload details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserCaseloadDetail']
        }
      }
      /** @description Incorrect request to remove a caseload from a user account */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to remove a caseload this user account */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
