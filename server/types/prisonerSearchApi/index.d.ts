/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/restricted-patient-search/match-restricted-patients': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Match prisoners by criteria
     * @description Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role
     */
    post: operations['findByCriteria']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner-search/release-date-by-prison': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Match prisoners who have a release date within a range, and optionally by prison
     * @description Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role
     */
    post: operations['findByReleaseDateAndPrison']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner-search/prisoner-numbers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Match prisoners by a list of prisoner numbers
     * @description Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role or PRISONER_SEARCH__PRISONER__RO
     */
    post: operations['findByNumbers']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner-search/possible-matches': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Search for possible matches by criteria
     * @description Search by prison number, PNC number, and/or name and date of birth, returning collated results by order of search.
     *            This will also search aliases for possible matches.
     *            Use when there is manual input, e.g. a user can select the correct match from search results.
     *            Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role.
     *
     */
    post: operations['findPossibleMatchesBySearchCriteria']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner-search/match': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Match prisoners by criteria, to search across a list of specific prisons use /match-prisoners
     * @deprecated
     * @description Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role
     */
    post: operations['findByCriteria_1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner-search/match-prisoners': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Match prisoners by criteria
     * @description Search by prisoner identifier or name and returning results for the criteria matched first.
     *             Typically used when the matching data is of high quality where the first match is expected to be a near perfect match.
     *             Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role.
     *
     */
    post: operations['findByCriteria_2']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner-search/booking-ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Match prisoners by a list of booking ids
     * @description Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role
     */
    post: operations['findByIds']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner-detail': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Find prisoners by exact or wildcard terms for specified fields and return a paginated result set
     * @description Search terms and identifiers can be provided in either or mixed case and are converted to the appropriate case.
     *           This endpoint will find both exact values (full term matched) or wildcards supporting the '*' and '?' symbols.
     *           The '*' symbol will match any number of characters e.g. firstName='J*' will match 'John', 'Jane', and 'James'.
     *           The '?' symbol will match any letter substituted at that position. e.g. firstName='t?ny' will match 'Tony' and 'Tiny'
     *           Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role.
     *
     */
    post: operations['prisonerDetailSearch']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/physical-detail': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * *** BETA *** Physical details search for prisoners within a prison / group of prisons - returns a paginated result set
     * @description BETA endpoint - subject to change. Search by physical details.
     *           If a cell location is provided then only one prison can be supplied, otherwise multiple prisons are allowed.
     *           If lenient is set to false (default) then all supplied physical details must match in order for results to be returned.
     *           If lenient is set to true then at least one physical detail must match.
     *           Searches will return results for partial string matches, so searching for an ethnicity of white will return all
     *           prisoners with ethnicity of White: Eng./Welsh/Scot./N.Irish/British, White: Irish etc.
     *           Results are ordered so that prisoners that match the most criteria are returned first, then secondary order is by
     *           prisoner number.
     *           Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role.
     *
     */
    post: operations['prisonerDetailSearch_1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/match-prisoners': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Match for an prisoner by criteria
     * @description This is a more lenient version to other match endpoints that includes alias and fuzzy date of birth matching.
     *            It will return the best group of matching prisoners based on the request
     *            Specify the request criteria to match against.
     *            Role required is ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH.
     *
     */
    post: operations['matchPrisoners']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/keyword': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Search for prisoners by keyword or identifiers within a list of prisons and return a paginated result set
     * @description Words and identifiers can be provided in either or mixed case and will be matched against all indexed text and keyword fields.
     *           Identifiers within the [and, or, not, exact] terms are detected and converted to the appropriate case.
     *           Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role.
     *
     */
    post: operations['keywordSearch']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/global-search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Match prisoners by criteria
     * @description Requires ROLE_GLOBAL_SEARCH role or ROLE_PRISONER_SEARCH role or PRISONER_SEARCH__PRISONER__RO
     */
    post: operations['globalFindByCriteria']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attribute-search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Search for prisoners by attributes
     * @description <p>This endpoint allows you to create queries over all attributes from the <em>Prisoner</em> record. Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role.</p>
     *           <p>The request contains a list of queries to search on one or more attributes using a list of matchers. For example attribute "lastName""
     *           requires a <em>StringMatcher</em> so we can query on <strong>"lastName IS Smith"</strong>. Other type matchers include <em>IntMatcher</em>, <em>BooleanMatcher</em>,
     *           <em>DateMatcher</em> and <em>DateTimeMatcher</em>.
     *           </p>
     *           <p>Each query can also contain a list of sub-queries. Each sub-query can be considered as a separate query in brackets.
     *           Combining multiple sub-queries gives us the ability to create complex searches using any combination of a prisoner's
     *           attributes. For example we can model nested queries such as <strong>"lastName IS Smith AND (prisonId IS MDI OR (prisonId IS OUT AND lastPrisonId IS MDI))"</strong>.
     *           </p>
     *           <p>To find all attributes that can be searched for please refer to the <em>Prisoner</em> record or get them from endpoint <a target="_blank" href="/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config#/Attribute search/getAttributes"><strong>GET /attribute-search/attributes</strong></a>. Attributes from lists can be
     *           searched for with dot notation, e.g. <strong>"attribute=aliases.firstName"</strong> or <strong>"attribute=tattoos.bodyPart"</strong>.
     *           Attributes from complex objects can also be searched for with dot notation, e.g. <strong>"attribute=currentIncentive.level.code"</strong>.
     *           </p>
     *           <p>Note that when searching lists of complex objects (e.g. aliases, alerts, tattoos) if you want to search for multiple attributes within the same object then you need
     *           to include them in the same query. For example, to search for alias "John Smith" you should search for <strong>aliases.firstName IS "John"</strong> and <strong>aliases.lastName IS "Smith"</strong> using string matchers in the same query.
     *           If you search for them in different queries you will receive anyone with firstName John and also anyone with lastName Smith.
     *           </p>
     *           <p>Many attributes contain reference data restricted to a fixed list of values. For example, attribute "inOutStatus" only contains values "IN", "OUT" and "TRN".
     *           To find which attributes use reference data and to fetch the possible attribute values see the endpoint <a target="_blank" href="/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config#/Reference data/referenceData"><strong>GET /reference-data/{attribute}</strong></a>.
     *           </p>
     *           <p>String attributes support advanced search techniques such as <a href="https://opensearch.org/docs/latest/query-dsl/term/fuzzy/">fuzzy search</a> matching and <a href="https://opensearch.org/docs/latest/query-dsl/term/wildcard/">wildcard search</a>. All String searches are case-insensitive (except for IS with fuzzy matching which is not supported by OpenSearch).
     *           <ul>
     *             <li>IS and IS_NOT require an exact match (wildcards ? and * will not work). E.g. If religion is "Christian" then <strong>"religion IS Christian"</strong> will match but <strong>"religion IS Christ*"</strong> will not.</li>
     *             <li>For IS and CONTAINS some attributes support fuzzy matching e.g. they allow spelling mistakes. Call endpoint <strong>GET /attribute-search/attributes</strong> to see which attributes support fuzzy matching. E.g. If firstName is "Jonathan" then <strong>"firstName IS Johnathon"</strong> or <strong>"firstName CONTAINS Johnathon"</strong> will match. Note that fuzzy matches for IS are case sensitive but for CONTAINS they are case insensitive.</li>
     *             <li>CONTAINS without wildcards (? and *) for a non-fuzzy attribute looks for the exact search term anywhere in the attribute value. E.g. If religion is "Christian" then <strong>"religion CONTAINS ist"</strong> will match.</li>
     *             <li>CONTAINS with wildcards ? (single character) and/or * (zero to many characters) perform a wildcard search which must match the entire attribute value. E.g. If firstName is "Jonathan" then <strong>"firstName CONTAINS Jon*"</strong> will match but <strong>"firstName CONTAINS nath*"</strong> will not.</li>
     *             <li>STARTSWITH checks only the prefix of the attribute value and does not support fuzzy matching or wildcards. E.g.If firstName is "Jonathan" then <strong>"firstName STARTSWITH Jon"</strong> will match but <strong>"firstName STARTSWITH Jon*"</strong> will not.</li>
     *             <li>IN checks that the attribute value is any of the list of Strings provided in the search term. The search term should be a comma separated list of Strings to search, E.g. "searchValue1,searchValue2,searchValue3". This only matches exactly - no fuzzy search, wildcards or case-insensitive search is supported by OpenSearch. E.g.If firstName is "Jonathan" then <strong>"firstName IN 'Jonathan,Bob,Chris'"</strong> will match but <strong>"firstName IN 'Adrian,Bob,Chris'"</strong> will not.</li>
     *           </ul>
     *           </p>
     *           <p>To assist with debugging queries we publish events in App Insights. To search in App Insights Log Analytics run query:
     *           <pre>
     *             AppEvents
     *             | where Name == 'POSAttributeSearch'
     *           </pre>
     *           </p>
     *           <h3>Example Requests</h3>
     *           <p>Note that the default "joinType" is "AND" so it could be omitted from the examples below (but is included for clarity).</p>
     *           <h4>Search for all prisoners in Moorland with a height between 150 and 180cm</h4>
     *           <br/>
     *           Query: <strong>"prisonId = "MDI" AND (heightCentimetres >= 150 AND heightCentimetres <= 180)"</strong>
     *           <br/>
     *           JSON request:
     *           <br/>
     *           <pre>
     *             {
     *               "joinType": "AND",
     *               "queries": [
     *                 {
     *                   "joinType": "AND",
     *                   "matchers": [
     *                     {
     *                       "type": "String",
     *                       "attribute": "prisonId",
     *                       "condition": "IS",
     *                       "searchTerm": "MDI"
     *                     },
     *                     {
     *                       "type": "Int",
     *                       "attribute": "heightCentimetres",
     *                       "minValue": 150,
     *                       "maxValue": 180
     *                     }
     *                   ]
     *                 }
     *               ]
     *             }
     *           </pre>
     *           <br/>
     *           <h4>Search for all prisoners in a list of cells in Moorland</h4>
     *           Query: <strong>"prisonId = "MDI" AND cellLocation IN (1-2-001, 1-3-014, 3-1-020)</strong>
     *           <br/>
     *           JSON request:
     *           <br/>
     *           <pre>
     *             {
     *               "joinType": "AND",
     *               "queries": [
     *                 {
     *                   "joinType": "AND",
     *                   "matchers": [
     *                     {
     *                       "type": "String",
     *                       "attribute": "prisonId",
     *                       "condition": "IS",
     *                       "searchTerm": "MDI"
     *                     },
     *                     {
     *                       "type": "String",
     *                       "attribute": "cellLocation",
     *                       "condition": "IN",
     *                       "searchTerm": "1-2-001,1-3-014,3-1-020"
     *                     }
     *                   ]
     *                 }
     *               ]
     *             }
     *           </pre>
     *           <br/>
     *           <h4>Search for all prisoners received since 1st Jan 2024 with a dragon tattoo on either their arm or shoulder</h4>
     *           <br/>
     *           Query: <strong>"(receptionDate >= 2024-01-01) AND ((tattoos.bodyPart = "arm" AND tattoos.comment CONTAINS "dragon" ) OR (tattoos.bodyPart = "shoulder" AND tattoos.comment CONTAINS "dragon"))"</strong>
     *           <br/>
     *           JSON request:
     *           <br/>
     *           <pre>
     *             {
     *               "joinType": "AND",
     *               "queries": [
     *                 {
     *                   "matchers": [
     *                     {
     *                       "type": "Date",
     *                       "attribute": "receptionDate",
     *                       "minValue": "2024-01-01"
     *                     }
     *                   ]
     *                 },
     *                 {
     *                   "joinType": "OR",
     *                   "subQueries": [
     *                     {
     *                       "joinType": "AND",
     *                       "matchers": [
     *                         {
     *                           "type": "String",
     *                           "attribute": "tattoos.bodyPart",
     *                           "condition": "IS",
     *                           "searchTerm": "arm"
     *                         },
     *                         {
     *                           "type": "String",
     *                           "attribute": "tattoos.comment",
     *                           "condition": "CONTAINS",
     *                           "searchTerm": "dragon"
     *                         }
     *                       ]
     *                     },
     *                     {
     *                       "joinType": "AND",
     *                       "matchers": [
     *                         {
     *                           "type": "String",
     *                           "attribute": "tattoos.bodyPart",
     *                           "condition": "IS",
     *                           "searchTerm": "shoulder"
     *                         },
     *                         {
     *                           "type": "String",
     *                           "attribute": "tattoos.comment",
     *                           "condition": "CONTAINS",
     *                           "searchTerm": "dragon"
     *                         }
     *                       ]
     *                     }
     *                   ]
     *                 }
     *               ]
     *             }
     *           </pre>
     *
     */
    post: operations['attributeSearch']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/response-fields': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all available response fields
     * @description This exists for developers to find all available values for responseFields parameters. Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role
     */
    get: operations['responseFields']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/reference-data/{attribute}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * *** BETA *** Reference data search
     * @description BETA endpoint - reference data returned reflects the data assigned to prisoners
     *           rather than all the possible values.  Only to be used for searching existing data purposes.
     *           This method will also cache all reference data results for an hour and any new data will only appear after an hour.
     *           Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role.
     *
     */
    get: operations['referenceData']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/reference-data/alerts/types': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * *** BETA *** Alerts reference data
     * @description BETA endpoint - alerts reference data returned reflects the data assigned to prisoners
     *           rather than all the possible values.  Only to be used for searching existing data purposes.
     *           This method will also cache all reference data results for an hour and any new data will only appear after an hour.
     *           Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role.
     *
     */
    get: operations['alertsReferenceData']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get prisoner by prisoner number (AKA NOMS number)
     * @description Requires  ROLE_PRISONER_SEARCH or ROLE_VIEW_PRISONER_DATA role or PRISONER_SEARCH__PRISONER__RO
     */
    get: operations['findByPrisonNumber']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner-search/prison/{prisonId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all prisoners in a prison, including restricted patients supported by a POM
     * @description Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role
     */
    get: operations['findByPrison']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner-location/scroll/{scroll-id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the next page of prisoners.
     * @description To be used in conjunction with /prisoner-location/all. Uses the scroll id to get the next page of
     *           prisoners.  Calls should be repeated until a
     *           `null` scroll id is then returned, indicating that no more data is available.  Each call will return the scroll id,
     *           which should be used for the next call, rather than re-using the original scroll id.
     *           Note that the OpenSearch scroll will expire after 5 minutes, so if no calls are made during that time then the
     *           scroll id will be invalid.
     *           Requires PRISONER_SEARCH__PRISONER_LOCATION__RO role.
     */
    get: operations['scroll']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner-location/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all prisoners.  This will return the first page of results and a scroll id to retrieve the next page
     * @description To be used in conjunction with /prisoner-location/scroll/{scroll-id}.
     *           This endpoint will return the first page of results (10,000 per page) and also a scroll id.
     *           This scroll id can then be used to make subsequent calls to return the data.
     *           It is required that this call will then be followed by calls to the /scroll/{scroll-id} endpoint to retrieve all
     *           the rest of the data, since it opens an OpenSearch scroll that will be cleared when no more data is available.
     *           Requires PRISONER_SEARCH__PRISONER_LOCATION__RO role.
     */
    get: operations['findAll']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prison/{prisonId}/prisoners': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Search for prisoners within a particular prison establishment
     * @description This search is optimised for clients that have a simple search term typically containing the prisoner's name
     *           or prisoner number. The user typically is certain the prisoner is within the establishment and knows key information
     *           about the prisoner.
     *
     *           Requires ROLE_PRISONER_IN_PRISON_SEARCH or ROLE_PRISONER_SEARCH role.
     *
     *           Sort fields supported are: firstName, lastName, prisonerNumber, dateOfBirth, cellLocation e.g "sort=firstName,lastName,desc"
     *
     *           Examples:
     *
     *           "/prison/BXI/prisoners?term=John&sort=firstName,lastName,desc&page=2&size=20"
     *           This will return all people in HMP Brixton whose first or last names begins with JOHN.
     *           Results will be ordered by firstName, lastName descending.
     *           Page 3 will be returned with a maximum of 20 results per page.
     *
     *           "/prison/WWI/prisoners?sort=cellLocation"
     *           This will return all people in HMP Wandsworth.
     *           Results will be ordered by cell location ascending.
     *           Page 1 will be returned with a maximum of 10 results per page.
     *
     *           "/prison/WWI/prisoners?cellLocationPrefix=WWI-2&term=smith"
     *           "/prison/WWI/prisoners?cellLocationPrefix=2&term=smith"
     *           This will return all people in HMP Wandsworth block 2 whose name starts with SMITH.
     *
     *           "/prison/WWI/prisoners?cellLocationPrefix=2-A-3-001"
     *           This will return all people in HMP Wandsworth cell WWI-2-A-3-001
     *
     *           "/prison/WWI/prisoners?term=A1234KJ"
     *           "/prison/WWI/prisoners?term=A1234KJ bananas"
     *           This will return the single prisoner with prisoner number A1234KJ in HMP Wandsworth.
     *           An empty page will be returned if not found.
     *
     *           "/prison/WWI/prisoners?term=A J&fromDob=1956-01-01&toDob=2000-01-02"
     *           This will return all people in HMP Wandsworth. Born on or after 1956-01-01 and on or before 2000-01-02,
     *           whose name begins with A J, e.g Alan Jones born on 1956-01-01.
     *
     *           "/prison/WWI/prisoners?alerts=TACT&alerts=PEEP"
     *           This will return all people in HMP Wandsworth. With the alerts TACT or PEEP.
     *
     *
     */
    get: operations['search']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attribute-search/attributes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve all attributes supported by the attribute search
     * @description Returns all attributes that can be passed into the attribute search including their type.
     */
    get: operations['getAttributes']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** @description Search Criteria for Prisoner Search */
    RestrictedPatientSearchCriteria: {
      /**
       * @description Prisoner identifier, one of prisoner number, book number, booking ID or PNC
       * @example A1234AA,
       */
      prisonerIdentifier?: string
      /**
       * @description First Name
       * @example John
       */
      firstName?: string
      /**
       * @description Last Name
       * @example Smith
       */
      lastName?: string
      /**
       * @description List of supporting Prison Ids to restrict the search by. Unrestricted if not supplied or null
       * @example [
       *       "MDI"
       *     ]
       */
      supportingPrisonIds?: string[]
    }
    Address: {
      /**
       * @description The full address on a single line.  No fixed address records will have the fullAddress set to 'No fixed address'. Will never be null.
       * @example 1
       */
      fullAddress?: string
      /**
       * @description The postal code
       * @example S10 1BP
       */
      postalCode?: string
      /**
       * Format: date
       * @description The date the address became active according to NOMIS. Will never be null.
       * @example 2020-07-17
       */
      startDate?: string
      /**
       * @description Whether the address is currently marked as the primary address. Will never be null.
       * @example true
       */
      primaryAddress?: boolean
      /**
       * @description No fixed address. This address record is only ever returned if it is also the primary address, otherwise it is ignored. Will never be null.
       * @example true
       */
      noFixedAddress?: boolean
      /** @description Phone numbers linked to the address. Note the phone number contains only numbers, no whitespace. Therefore searching on 'addresses.phoneNumbers.number' should not pass any non-numeric characters. */
      phoneNumbers?: components['schemas']['PhoneNumber'][]
    }
    BodyPartDetail: {
      /**
       * @description Part of the body that has the mark. From REFERENCE_CODES table where DOMAIN = BODY_PART. Allowable values extracted 08/02/2023.
       * @example Head
       * @enum {string}
       */
      bodyPart?:
        | 'Ankle'
        | 'Arm'
        | 'Ear'
        | 'Elbow'
        | 'Face'
        | 'Finger'
        | 'Foot'
        | 'Hand'
        | 'Head'
        | 'Knee'
        | 'Leg'
        | 'Lip'
        | 'Neck'
        | 'Nose'
        | 'Shoulder'
        | 'Thigh'
        | 'Toe'
        | 'Torso'
      /**
       * @description Optional free text comment describing the mark
       * @example Skull and crossbones covering chest
       */
      comment?: string
    }
    CurrentIncentive: {
      /** @description Incentive level. Will never be null. */
      level?: components['schemas']['IncentiveLevel']
      /**
       * Format: date-time
       * @description Date time of the incentive. Will never be null.
       * @example 2022-11-10T15:47:24
       */
      dateTime: string
      /**
       * Format: date
       * @description Schedule new review date
       * @example 2022-11-10
       */
      nextReviewDate: string
    }
    EmailAddress: {
      /**
       * @description The email address. Will never be null.
       * @example john.smith@gmail.com
       */
      email?: string
    }
    Identifier: {
      /**
       * @description The type of identifier. Will never be null.
       * @example PNC, CRO, DL, NINO
       */
      type?: string
      /**
       * @description The identifier value. Will never be null.
       * @example 12/394773H
       */
      value?: string
      /**
       * Format: date
       * @description The date the identifier was issued according to NOMIS
       * @example 2020-07-17
       */
      issuedDate?: string
      /** @description Free text entered into NOMIS when the identifier was recorded. */
      issuedAuthorityText?: string
      /**
       * Format: date-time
       * @description The date/time the identifier was created in the system. Will never be null.
       * @example 2020-07-17T12:34:56.833Z
       */
      createdDateTime?: string
    }
    IncentiveLevel: {
      /**
       * @description code. Will never be null.
       * @example STD
       */
      code?: string
      /**
       * @description description. Will never be null.
       * @example Standard
       */
      description?: string
    }
    Language: {
      /**
       * @description A LOV from domain LANG_TYPE
       * @enum {string}
       */
      type?: 'PRIM' | 'SEC' | 'PREF_SPEAK' | 'PREF_WRITE'
      /**
       * @description The actual language code, from domain LANG
       * @example ENG
       */
      code?: string
      /**
       * @description The level of reading skill, from domain LANG_SKILLS:
       *         |Y  Yes
       *         |A	Average
       *         |D	Dyslexia
       *         |G	Good
       *         |N	Nil
       *         |P	Poor
       *         |R	Refused
       * @enum {string}
       */
      readSkill?: 'Y' | 'N' | 'A' | 'D' | 'G' | 'P' | 'R'
      /**
       * @description The level of writing skill, see description for readSkill
       * @enum {string}
       */
      writeSkill?: 'Y' | 'N' | 'A' | 'D' | 'G' | 'P' | 'R'
      /**
       * @description The level of writing skill, see description for readSkill
       * @enum {string}
       */
      speakSkill?: 'Y' | 'N' | 'A' | 'D' | 'G' | 'P' | 'R'
      /** @description Whether an interpreter requested */
      interpreterRequested?: boolean
    }
    Offence: {
      /**
       * @description The statue code. Will never be null.
       * @example TH68
       */
      statuteCode?: string
      /**
       * @description The offence code. Will never be null.
       * @example TH68010
       */
      offenceCode?: string
      /**
       * @description The offence description. Will never be null.
       * @example Theft from a shop
       */
      offenceDescription?: string
      /**
       * Format: date
       * @description The date of the offence
       * @example 2024-05-23
       */
      offenceDate?: string
      /** @description Indicates this offence is for the latest NOMIS booking. Will never be null. */
      latestBooking?: boolean
      /**
       * Format: date
       * @description Start date of sentence - null if there is no associated sentence
       * @example 2018-03-10
       */
      sentenceStartDate?: string
      /** @description Primary sentence - true if it is not a consecutive sentence, false if it is a consecutive sentence, null if no sentence found for the charge. */
      primarySentence?: boolean
    }
    PagePrisoner: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['Prisoner'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      last?: boolean
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      pageSize?: number
      /** Format: int32 */
      pageNumber?: number
      paged?: boolean
      unpaged?: boolean
    }
    PersonalCareNeed: {
      /**
       * @description Problem Type, from reference data with domain 'HEALTH'
       * @example MATSTAT
       */
      problemType?: string
      /**
       * @description Problem Code, from reference data with domain 'HEALTH_PBLM'
       * @example ACCU9
       */
      problemCode?: string
      /**
       * @description Problem Status, from reference data with domain 'HEALTH_STS'
       * @enum {string}
       */
      problemStatus?: 'ON' | 'I' | 'EBS'
      /** @description Problem Description */
      problemDescription?: string
      /** @description Comment */
      commentText?: string
      /**
       * Format: date
       * @description Start Date
       * @example 2020-06-21
       */
      startDate?: string
      /**
       * Format: date
       * @description End Date
       * @example 2025-05-11
       */
      endDate?: string
    }
    PhoneNumber: {
      /**
       * @description The type of the phone number. Will never be null.
       * @example HOME, MOB
       */
      type?: string
      /**
       * @description The phone number. Numeric characters only (no whitespace). Will never be null.
       * @example 01141234567
       */
      number?: string
    }
    Prisoner: {
      /**
       * @description Prisoner Number
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * @description PNC Number
       * @example 12/394773H
       */
      pncNumber?: string
      /**
       * @description PNC Number
       * @example 12/394773H
       */
      pncNumberCanonicalShort?: string
      /**
       * @description PNC Number
       * @example 2012/394773H
       */
      pncNumberCanonicalLong?: string
      /**
       * @description CRO Number
       * @example 29906/12J
       */
      croNumber?: string
      /**
       * @description Booking No.
       * @example 0001200924
       */
      bookingId?: string
      /**
       * @description Book Number
       * @example 38412A
       */
      bookNumber?: string
      /**
       * @description Title
       * @example Ms
       */
      title?: string
      /**
       * @description First Name
       * @example Robert
       */
      firstName: string
      /**
       * @description Middle Names
       * @example John James
       */
      middleNames?: string
      /**
       * @description Last name
       * @example Larsen
       */
      lastName: string
      /**
       * Format: date
       * @description Date of Birth
       * @example 1975-04-02
       */
      dateOfBirth: string
      /**
       * @description Gender
       * @example Female
       */
      gender: string
      /**
       * @description Ethnicity
       * @example White: Eng./Welsh/Scot./N.Irish/British
       */
      ethnicity: string
      /**
       * @description Ethnicity code
       * @example W1
       */
      raceCode: string
      /**
       * @description Youth Offender?
       * @example true
       */
      youthOffender: boolean
      /**
       * @description Marital Status
       * @example Widowed
       */
      maritalStatus: string
      /**
       * @description Religion
       * @example Church of England (Anglican)
       */
      religion: string
      /**
       * @description Nationality
       * @example Egyptian
       */
      nationality: string
      /**
       * @description Smoker (V=vapes)
       * @enum {string}
       */
      smoker?: 'Y' | 'N' | 'V'
      /** @description Personal Care Needs */
      personalCareNeeds?: components['schemas']['PersonalCareNeed'][]
      /** @description Languages */
      languages?: components['schemas']['Language'][]
      /**
       * Format: int64
       * @description The prisoner's current facial image can be retrieved by plugging this id into the prison-api endpoint /app/images/{prisonerNumber}/data?imageId={imageId}
       * @example 2122100
       */
      currentFacialImageId?: number
      /**
       * @description Status of the prisoner
       * @example ACTIVE IN
       */
      status: string
      /**
       * @description Last Movement Type Code of prisoner
       * @example CRT
       */
      lastMovementTypeCode?: string
      /**
       * @description Last Movement Reason of prisoner
       * @example CA
       */
      lastMovementReasonCode?: string
      /**
       * @description In/Out Status
       * @example IN
       * @enum {string}
       */
      inOutStatus?: 'IN' | 'OUT' | 'TRN'
      /**
       * @description Prison ID
       * @example MDI
       */
      prisonId?: string
      /**
       * @description The last prison for the prisoner (which is the same as the prisonId if they are still inside prison)
       * @example MDI
       */
      lastPrisonId?: string
      /**
       * @description Prison Name
       * @example HMP Leeds
       */
      prisonName?: string
      /**
       * @description In prison cell location
       * @example A-1-002
       */
      cellLocation?: string
      /** @description Aliases Names and Details */
      aliases?: components['schemas']['PrisonerAlias'][]
      /** @description Alerts */
      alerts?: components['schemas']['PrisonerAlert'][]
      /**
       * @description Cell Sharing Risk Assessment
       * @example HIGH
       */
      csra?: string
      /**
       * @description Prisoner Category
       * @example C
       */
      category?: string
      /**
       * @description Complexity of Need level if female
       * @example low
       */
      complexityOfNeedLevel?: string
      /**
       * @description Legal Status
       * @example SENTENCED
       * @enum {string}
       */
      legalStatus?:
        | 'RECALL'
        | 'DEAD'
        | 'INDETERMINATE_SENTENCE'
        | 'SENTENCED'
        | 'CONVICTED_UNSENTENCED'
        | 'CIVIL_PRISONER'
        | 'IMMIGRATION_DETAINEE'
        | 'REMAND'
        | 'UNKNOWN'
        | 'OTHER'
      /**
       * @description The prisoner's imprisonment status code.
       * @example LIFE
       */
      imprisonmentStatus?: string
      /**
       * @description The prisoner's imprisonment status description.
       * @example Serving Life Imprisonment
       */
      imprisonmentStatusDescription?: string
      /**
       * @description The prisoner's convicted status code.
       * @example Convicted
       * @enum {string}
       */
      convictedStatus?: 'Convicted' | 'Remand'
      /**
       * @description Most serious offence for this sentence
       * @example Robbery
       */
      mostSeriousOffence: string
      /**
       * @description Indicates that the prisoner has been recalled
       * @example false
       */
      recall?: boolean
      /**
       * @description Indicates that the prisoner has an indeterminate sentence
       * @example true
       */
      indeterminateSentence?: boolean
      /**
       * Format: date
       * @description Start Date for this sentence
       * @example 2020-04-03
       */
      sentenceStartDate?: string
      /**
       * Format: date
       * @description Actual of most likely Release Date
       * @example 2023-05-02
       */
      releaseDate?: string
      /**
       * Format: date
       * @description Release Date Confirmed
       * @example 2023-05-01
       */
      confirmedReleaseDate?: string
      /**
       * Format: date
       * @description Sentence Expiry Date
       * @example 2023-05-01
       */
      sentenceExpiryDate?: string
      /**
       * Format: date
       * @description Licence Expiry Date
       * @example 2023-05-01
       */
      licenceExpiryDate?: string
      /**
       * Format: date
       * @description HDC Eligibility Date
       * @example 2023-05-01
       */
      homeDetentionCurfewEligibilityDate?: string
      /**
       * Format: date
       * @description HDC Actual Date
       * @example 2023-05-01
       */
      homeDetentionCurfewActualDate?: string
      /**
       * Format: date
       * @description HDC End Date
       * @example 2023-05-02
       */
      homeDetentionCurfewEndDate?: string
      /**
       * Format: date
       * @description Top-up supervision start date
       * @example 2023-04-29
       */
      topupSupervisionStartDate?: string
      /**
       * Format: date
       * @description Top-up supervision expiry date
       * @example 2023-05-01
       */
      topupSupervisionExpiryDate?: string
      /**
       * Format: int32
       * @description Days added to sentence term due to adjustments.
       * @example 10
       */
      additionalDaysAwarded?: number
      /**
       * Format: date
       * @description Release date for Non determinant sentence (if applicable). This will be based on one of ARD, CRD, NPD or PRRD.
       * @example 2023-05-01
       */
      nonDtoReleaseDate?: string
      /**
       * @description Indicates which type of non-DTO release date is the effective release date. One of 'ARD’, 'CRD’, ‘NPD’ or 'PRRD’.
       * @example ARD
       * @enum {string}
       */
      nonDtoReleaseDateType?: 'ARD' | 'CRD' | 'NPD' | 'PRRD'
      /**
       * Format: date
       * @description Date prisoner was received into prison at the start of the term
       * @example 2023-05-01
       */
      receptionDate?: string
      /**
       * Format: date
       * @description Date prisoner was transferred into the current or latest prison
       * @example 2023-05-01
       */
      lastAdmissionDate?: string
      /**
       * Format: date
       * @description Parole  Eligibility Date
       * @example 2023-05-01
       */
      paroleEligibilityDate?: string
      /**
       * Format: date
       * @description Automatic Release Date. If automaticReleaseOverrideDate is available then it will be set as automaticReleaseDate
       * @example 2023-05-01
       */
      automaticReleaseDate?: string
      /**
       * Format: date
       * @description Post Recall Release Date. if postRecallReleaseOverrideDate is available then it will be set as postRecallReleaseDate
       * @example 2023-05-01
       */
      postRecallReleaseDate?: string
      /**
       * Format: date
       * @description Conditional Release Date. If conditionalReleaseOverrideDate is available then it will be set as conditionalReleaseDate
       * @example 2023-05-01
       */
      conditionalReleaseDate?: string
      /**
       * Format: date
       * @description Actual Parole Date
       * @example 2023-05-01
       */
      actualParoleDate?: string
      /**
       * Format: date
       * @description Tariff Date
       * @example 2023-05-01
       */
      tariffDate?: string
      /**
       * Format: date
       * @description Release on Temporary Licence Date
       * @example 2023-05-01
       */
      releaseOnTemporaryLicenceDate?: string
      /**
       * @description current prison or outside with last movement information.
       * @example Outside - released from Leeds
       */
      locationDescription?: string
      /**
       * @description Indicates a restricted patient. Will never be null.
       * @example true
       */
      restrictedPatient: boolean
      /**
       * @description Supporting prison ID for POM
       * @example LEI
       */
      supportingPrisonId?: string
      /**
       * @description Which hospital the prisoner has been discharged to
       * @example HAZLWD
       */
      dischargedHospitalId?: string
      /**
       * @description Hospital name to which the prisoner was discharged
       * @example Hazelwood House
       */
      dischargedHospitalDescription?: string
      /**
       * Format: date
       * @description Date of discharge
       * @example 2020-05-01
       */
      dischargeDate?: string
      /**
       * @description Any additional discharge details
       * @example Psychiatric Hospital Discharge to Hazelwood House
       */
      dischargeDetails?: string
      /** @description Incentive level */
      currentIncentive?: components['schemas']['CurrentIncentive']
      /**
       * Format: int32
       * @description Height in centimetres of the prisoner
       * @example 200
       */
      heightCentimetres?: number
      /**
       * Format: int32
       * @description Weight in kilograms of the prisoner
       * @example 102
       */
      weightKilograms?: number
      /**
       * @description Hair colour. From PROFILE_CODES table where PROFILE_TYPE = HAIR. Allowable values extracted 07/02/2023.
       * @example Blonde
       * @enum {string}
       */
      hairColour?:
        | 'Bald'
        | 'Balding'
        | 'Black'
        | 'Blonde'
        | 'Brown'
        | 'Brunette'
        | 'Dark'
        | 'Dyed'
        | 'Ginger'
        | 'Grey'
        | 'Light'
        | 'Mouse'
        | 'Multi-coloured'
        | 'Red'
        | 'White'
      /**
       * @description Right eye colour. From PROFILE_CODES table where PROFILE_TYPE = R_EYE_C. Allowable values extracted 07/02/2023.
       * @example Green
       * @enum {string}
       */
      rightEyeColour?: 'Blue' | 'Brown' | 'Clouded' | 'Green' | 'Grey' | 'Hazel' | 'Missing' | 'Pink' | 'White'
      /**
       * @description Left eye colour. From PROFILE_CODES table where PROFILE_TYPE = L_EYE_C. Allowable values extracted 07/02/2023.
       * @example Hazel
       * @enum {string}
       */
      leftEyeColour?: 'Blue' | 'Brown' | 'Clouded' | 'Green' | 'Grey' | 'Hazel' | 'Missing' | 'Pink' | 'White'
      /**
       * @description Facial hair. From PROFILE_CODES table where PROFILE_TYPE = FACIAL_HAIR. Allowable values extracted 07/02/2023.
       * @example Clean Shaven
       * @enum {string}
       */
      facialHair?:
        | 'Full Beard'
        | 'Clean Shaven'
        | 'Goatee Beard'
        | 'Moustache Only'
        | 'Not Applicable (Female Offender)'
        | 'No Facial Hair'
        | 'Sideburns'
      /**
       * @description Shape of face. From PROFILE_CODES table where PROFILE_TYPE = FACE. Allowable values extracted 07/02/2023.
       * @example Round
       * @enum {string}
       */
      shapeOfFace?: 'Angular' | 'Bullet' | 'Oval' | 'Round' | 'Square' | 'Triangular'
      /**
       * @description Build. From PROFILE_CODES table where PROFILE_TYPE = BUILD. Allowable values extracted 07/02/2023.
       * @example Muscular
       * @enum {string}
       */
      build?:
        | 'Fat'
        | 'Frail'
        | 'Heavy'
        | 'Medium'
        | 'Muscular'
        | 'Obese'
        | 'Proportional'
        | 'Slight'
        | 'Small'
        | 'Stocky'
        | 'Stooped'
        | 'Thin'
      /**
       * Format: int32
       * @description UK shoe size
       * @example 10
       */
      shoeSize?: number
      /** @description List of parts of the body that have tattoos. This includes marks and other marks whose comment contains 'tattoo'. 'From REFERENCE_CODES table where DOMAIN = BODY_PART. Allowable values extracted 08/02/2023. */
      tattoos?: components['schemas']['BodyPartDetail'][]
      /** @description List of parts of the body that have scars. This includes marks and other marks whose comment contains 'scar'. From REFERENCE_CODES table where DOMAIN = BODY_PART. Allowable values extracted 08/02/2023. */
      scars?: components['schemas']['BodyPartDetail'][]
      /** @description List of parts of the body that have marks. This includes NOMIS physical details of type 'marks' and 'otherMarks'. If we find a comment with either 'tattoo' or 'scar' we also add to the list of tattoos or scars. From REFERENCE_CODES table where DOMAIN = BODY_PART. Allowable values extracted 08/02/2023. */
      marks?: components['schemas']['BodyPartDetail'][]
      /** @description Addresses. Note that no fixed addresses are only ever returned if they are also the primary address, otherwise they are filtered out. */
      addresses?: components['schemas']['Address'][]
      /** @description Email addresses */
      emailAddresses?: components['schemas']['EmailAddress'][]
      /** @description Telephone numbers. Note that the number will contain only numeric characters [0-9] (including no break between area code and number). Therefore if searching on 'phoneNumbers.number' you should not pass any non-numeric characters. */
      phoneNumbers?: components['schemas']['PhoneNumber'][]
      /** @description All identifiers for the prisoner including those recorded against aliases. Currently supports only PNC, CRO, NINO and DL. */
      identifiers?: components['schemas']['Identifier'][]
      /** @description All historical convicted offences */
      allConvictedOffences?: components['schemas']['Offence'][]
    }
    PrisonerAlert: {
      /**
       * @description Alert Type. Will never be null.
       * @example H
       */
      alertType?: string
      /**
       * @description Alert Code. Will never be null.
       * @example HA
       */
      alertCode?: string
      /**
       * @description Active. Will never be null.
       * @example true
       */
      active?: boolean
      /**
       * @description Expired. Will never be null.
       * @example true
       */
      expired?: boolean
    }
    PrisonerAlias: {
      /**
       * @description Title. Will never be null.
       * @example Ms
       */
      title?: string
      /**
       * @description First Name. Will never be null.
       * @example Robert
       */
      firstName?: string
      /**
       * @description Middle names. Will never be null.
       * @example Trevor
       */
      middleNames?: string
      /**
       * @description Last name. Will never be null.
       * @example Lorsen
       */
      lastName?: string
      /**
       * Format: date
       * @description Date of birth. Will never be null.
       * @example 1975-04-02
       */
      dateOfBirth?: string
      /**
       * @description Gender. Will never be null.
       * @example Male
       */
      gender?: string
      /**
       * @description Ethnicity. Will never be null.
       * @example White : Irish
       */
      ethnicity?: string
      /**
       * @description Ethnicity code. Will never be null.
       * @example W1
       */
      raceCode?: string
    }
    SortObject: {
      empty?: boolean
      sorted?: boolean
      unsorted?: boolean
    }
    /** @description Search Criteria for Release Date Search */
    ReleaseDateSearch: {
      /**
       * Format: date
       * @description The lower bound for the release date range of which to search - defaults to today if not provided
       * @example 2022-04-20
       */
      earliestReleaseDate?: string
      /**
       * Format: date
       * @description The upper bound for the release date range of which to search. A required field.
       * @example 2022-05-20
       */
      latestReleaseDate: string
      /**
       * @description List of Prison Ids (can include OUT and TRN) to restrict the search by. Unrestricted if not supplied or null
       * @example [
       *       "MDI"
       *     ]
       */
      prisonIds?: string[]
    }
    PrisonerNumbers: {
      /**
       * @description List of prisoner numbers to search by
       * @example [
       *       "A1234AA"
       *     ]
       */
      prisonerNumbers: string[]
    }
    /** @description Search Criteria for possible match */
    PossibleMatchCriteria: {
      /**
       * @description Prisoner first name
       * @example john
       */
      firstName?: string
      /**
       * @description Prisoner last Name
       * @example smith
       */
      lastName?: string
      /**
       * Format: date
       * @description Prisoner date of birth
       * @example 1996-02-10
       */
      dateOfBirth?: string
      /**
       * @description Police National Computer (PNC) number (This will match both long and short PNC formats)
       * @example 2018/0123456X
       */
      pncNumber?: string
      /**
       * @description The Prisoner NOMIS Id (aka prison number/offender no in DPS)
       * @example A1234AB
       */
      nomsNumber?: string
    }
    /** @description Search Criteria for Prisoner Search */
    PrisonSearch: {
      /**
       * @description Prisoner identifier, one of prisoner number, book number, booking ID or PNC
       * @example A1234AA,
       */
      prisonerIdentifier?: string
      /**
       * @description First Name
       * @example John
       */
      firstName?: string
      /**
       * @description Last Name
       * @example Smith
       */
      lastName?: string
      /**
       * @description Prison Id, Prison Id or OUT or TRN
       * @example MDI
       */
      prisonId?: string
      /**
       * @description Include aliases in search
       * @default false
       * @example false
       */
      includeAliases: boolean
    }
    /** @description Search Criteria for Prisoner Search */
    SearchCriteria: {
      /**
       * @description Prisoner identifier, one of prisoner number, book number, booking ID or PNC
       * @example A1234AA,
       */
      prisonerIdentifier?: string
      /**
       * @description First Name
       * @example John
       */
      firstName?: string
      /**
       * @description Last Name
       * @example Smith
       */
      lastName?: string
      /**
       * @description List of Prison Ids (can include OUT and TRN) to restrict the search by. Unrestricted if not supplied or null
       * @example [
       *       "MDI"
       *     ]
       */
      prisonIds?: string[]
      /**
       * @description Include aliases in search
       * @default false
       * @example false
       */
      includeAliases: boolean
    }
    BookingIds: {
      /**
       * @description List of bookingIds to search by
       * @example [
       *       1,
       *       2,
       *       3
       *     ]
       */
      bookingIds: number[]
    }
    PaginationRequest: {
      /**
       * Format: int32
       * @description The page number required in the paginated response
       * @example 0
       */
      page: number
      /**
       * Format: int32
       * @description The number of results to return for paginated response
       * @example 10
       */
      size: number
    }
    PrisonerDetailRequest: {
      /**
       * @description Prisoner first name
       * @example john
       */
      firstName?: string
      /**
       * @description Prisoner last name
       * @example smith
       */
      lastName?: string
      /**
       * @description Prisoner number (aka. offenderId, nomisId)
       * @example A1234AA
       */
      nomsNumber?: string
      /**
       * @description Police National Computer (PNC) number
       * @example 2018/0123456X
       */
      pncNumber?: string
      /**
       * @description Criminal Records Office (CRO) number
       * @example SF80/655108T
       */
      croNumber?: string
      /**
       * @description Fuzzy matching. Allow a one character difference in spelling in word lengths below five and two differences above.
       * @example Smith will match Smyth
       */
      fuzzyMatch?: boolean
      /**
       * @description List of prison codes to filter results by
       * @example ['LEI', 'MDI']
       */
      prisonIds: string[]
      /**
       * Format: date
       * @description Date of birth to filter results by
       * @example 1970-02-28
       */
      dateOfBirth?: string
      /**
       * @description Include aliases in search
       * @default true
       * @example true
       */
      includeAliases: boolean
      /** @description Pagination options. Will default to the first page if omitted. */
      pagination: components['schemas']['PaginationRequest']
    }
    PrisonerDetailResponse: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['Prisoner'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      last?: boolean
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    ErrorResponse: {
      /**
       * Format: int32
       * @description Status of Error Code
       * @example 400
       */
      status: number
      /**
       * @description Developer Information message
       * @example System is down
       */
      developerMessage?: string
      /**
       * Format: int32
       * @description Internal Error Code
       * @example 20012
       */
      errorCode: number
      /**
       * @description Error message information
       * @example Prisoner Not Found
       */
      userMessage: string
      /**
       * @description Additional information about the error
       * @example Hard disk failure
       */
      moreInfo?: string
    }
    BodyPart: {
      /**
       * @description Body part that has the physical mark, searching on the description in the type BODY_PART in the REFERENCE_CODES table. Allowable values extracted 08/02/2023.
       * @example Arm
       * @enum {string}
       */
      bodyPart?:
        | 'Ankle'
        | 'Arm'
        | 'Ear'
        | 'Elbow'
        | 'Face'
        | 'Finger'
        | 'Foot'
        | 'Hand'
        | 'Head'
        | 'Knee'
        | 'Leg'
        | 'Lip'
        | 'Neck'
        | 'Nose'
        | 'Shoulder'
        | 'Thigh'
        | 'Toe'
        | 'Torso'
      /**
       * @description Comment on the physical mark.
       * @example dragon
       */
      comment?: string
    }
    PhysicalDetailRequest: {
      /**
       * @description List of prison codes to filter results by
       * @example ['LEI', 'MDI']
       */
      prisonIds: string[]
      /**
       * @description Filter for the prisoners cell location. A block wing or cell can be specified. With prison id can be included or absent so HEI-3-1 and 3-1 are equivalent when the prison id is HEI
       * @example 3-1
       */
      cellLocationPrefix?: string
      /**
       * @description Gender, searching on the description in the domain SEX in the REFERENCE_CODES table.
       * @example Male
       * @enum {string}
       */
      gender?: 'Female' | 'Male' | 'Not Known / Not Recorded' | 'Not Specified (Indeterminate)' | 'Refused'
      /**
       * @description Ethnicity, searching on the description in the domain ETHNICITY in the REFERENCE_CODES table.
       * @example White : Irish
       * @enum {string}
       */
      ethnicity?:
        | 'Asian/Asian British: Indian'
        | 'Asian/Asian British: Pakistani'
        | 'Asian/Asian British: Bangladeshi'
        | 'Asian/Asian British: Chinese'
        | "Asian/Asian British: Any other backgr'nd"
        | 'Black/Black British: Caribbean'
        | 'Black/Black British: African'
        | "Black/Black British: Any other Backgr'nd"
        | 'Mixed: White and Black Caribbean'
        | 'Mixed: White and Black African'
        | 'Mixed: White and Asian'
        | 'Mixed: Any other background'
        | 'Needs to be confirmed following Merge'
        | 'Prefer not to say'
        | 'Chinese'
        | 'Other: Arab'
        | 'Other: Any other background'
        | 'White: Eng./Welsh/Scot./N.Irish/British'
        | 'White : Irish'
        | 'White: Gypsy or Irish Traveller'
        | 'White : Irish Traveller/Gypsy'
        | 'White: Any other background'
      /**
       * Format: int32
       * @description Minimum height of the prisoner in centimetres
       * @example 170
       */
      minHeight?: number
      /**
       * Format: int32
       * @description Maximum height of the prisoner in centimetres
       * @example 198
       */
      maxHeight?: number
      /**
       * Format: int32
       * @description Minimum weight of the prisoner in kilograms
       * @example 80
       */
      minWeight?: number
      /**
       * Format: int32
       * @description Maximum weight of the prisoner in kilograms
       * @example 90
       */
      maxWeight?: number
      /**
       * @description Hair colour, searching on the description in the type HAIR in the PROFILE_CODES table. Allowable values extracted 07/02/2023.
       * @example Brunette
       * @enum {string}
       */
      hairColour?:
        | 'Bald'
        | 'Balding'
        | 'Black'
        | 'Blonde'
        | 'Brown'
        | 'Brunette'
        | 'Dark'
        | 'Dyed'
        | 'Ginger'
        | 'Grey'
        | 'Light'
        | 'Mouse'
        | 'Multi-coloured'
        | 'Red'
        | 'White'
      /**
       * @description Right eye colour, searching on the description in the type R_EYE_C in the PROFILE_CODES table. Allowable values extracted 07/02/2023.
       * @example Green
       * @enum {string}
       */
      rightEyeColour?: 'Blue' | 'Brown' | 'Clouded' | 'Green' | 'Grey' | 'Hazel' | 'Missing' | 'Pink' | 'White'
      /**
       * @description Left eye colour, searching on the description in the type L_EYE_C in the PROFILE_CODES table. Allowable values extracted 07/02/2023.
       * @example Hazel
       * @enum {string}
       */
      leftEyeColour?: 'Blue' | 'Brown' | 'Clouded' | 'Green' | 'Grey' | 'Hazel' | 'Missing' | 'Pink' | 'White'
      /**
       * @description Facial hair, searching on the description in the type FACIAL_HAIR in the PROFILE_CODES table. Allowable values extracted 07/02/2023.
       * @example Goatee Beard
       * @enum {string}
       */
      facialHair?:
        | 'Full Beard'
        | 'Clean Shaven'
        | 'Goatee Beard'
        | 'Moustache Only'
        | 'Not Applicable (Female Offender)'
        | 'No Facial Hair'
        | 'Sideburns'
      /**
       * @description Shape of face, searching on the description in the type FACE in the PROFILE_CODES table. Allowable values extracted 07/02/2023.
       * @example Bullet
       * @enum {string}
       */
      shapeOfFace?: 'Angular' | 'Bullet' | 'Oval' | 'Round' | 'Square' | 'Triangular'
      /**
       * @description Physical build, searching on the description in the type BUILD in the PROFILE_CODES table. Allowable values extracted 07/02/2023.
       * @example Medium
       * @enum {string}
       */
      build?:
        | 'Fat'
        | 'Frail'
        | 'Heavy'
        | 'Medium'
        | 'Muscular'
        | 'Obese'
        | 'Proportional'
        | 'Slight'
        | 'Small'
        | 'Stocky'
        | 'Stooped'
        | 'Thin'
      /**
       * Format: int32
       * @description Minimum UK shoe size of the prisoner
       * @example 5
       */
      minShoeSize?: number
      /**
       * Format: int32
       * @description Maximum UK shoe size of the prisoner
       * @example 10
       */
      maxShoeSize?: number
      /** @description List of body parts that have tattoos */
      tattoos?: components['schemas']['BodyPart'][]
      /** @description List of body parts that have marks */
      marks?: components['schemas']['BodyPart'][]
      /** @description List of body parts that have scars */
      scars?: components['schemas']['BodyPart'][]
      /**
       * @description
       *             Whether all terms are required to match. If set to true then only matches on all fields will return a result.
       *             If set to false then matches will return a higher score than non matches, but all will be returned.
       *             Prison and cell location will always be required to match.
       * @example false
       */
      lenient: boolean
      /** @description Pagination options. Will default to the first page if omitted. */
      pagination: components['schemas']['PaginationRequest']
    }
    PhysicalDetailResponse: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['Prisoner'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      last?: boolean
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    MatchRequest: {
      /**
       * @description Prisoner first name
       * @example john
       */
      firstName?: string
      /**
       * @description Prisoner last Name
       * @example smith
       */
      lastName?: string
      /**
       * Format: date
       * @description Prisoner date of birth
       * @example 1996-02-10
       */
      dateOfBirth?: string
      /**
       * @description Police National Computer (PNC) number
       * @example 2018/0123456X
       */
      pncNumber?: string
      /**
       * @description Criminal Records Office (CRO) number
       * @example SF80/655108T
       */
      croNumber?: string
      /**
       * @description The Prisoner NOMIS Id (aka prison number/offender no in DPS)
       * @example A1234AB
       */
      nomsNumber?: string
    }
    PrisonerMatch: {
      /** @description Details of the matching prisoner */
      prisoner: components['schemas']['Prisoner']
    }
    PrisonerMatches: {
      /** @description List of prisoners that share the same possibility of being the match */
      matches: components['schemas']['PrisonerMatch'][]
      /**
       * @description How the match was performed
       * @enum {string}
       */
      matchedBy:
        | 'ALL_SUPPLIED'
        | 'ALL_SUPPLIED_ALIAS'
        | 'HMPPS_KEY'
        | 'EXTERNAL_KEY'
        | 'NAME'
        | 'PARTIAL_NAME'
        | 'PARTIAL_NAME_DOB_LENIENT'
        | 'NOTHING'
    }
    KeywordRequest: {
      /**
       * @description Match where any of the keywords are present in any text field
       * @example smith james john
       */
      orWords?: string
      /**
       * @description Match where all keywords are present in any text field
       * @example smith james
       */
      andWords?: string
      /**
       * @description Filter results where any of these words are present in any text field
       * @example jonas
       */
      notWords?: string
      /**
       * @description Match only prisoners where the full phrase is present in any text field
       * @example John Smith
       */
      exactPhrase?: string
      /**
       * @description Fuzzy matching. Allow a one character difference in spelling in word lengths below five and two differences above.
       * @example Smith will match Smyth
       */
      fuzzyMatch?: boolean
      /**
       * @description List of prison codes to filter results
       * @example [
       *       "LEI",
       *       "MDI"
       *     ]
       */
      prisonIds: string[]
      /** @description Pagination options. Will default to the first page if omitted. */
      pagination: components['schemas']['PaginationRequest']
      /**
       * @description The type of search. When set to DEFAULT (which is the default when not provided) search order is by calculated relevance (AKA score). An ESTABLISHMENT type will order results by name and is designed for using this API for a single quick search field for prisoners within a specific prison
       * @enum {string}
       */
      type: 'DEFAULT' | 'ESTABLISHMENT'
    }
    KeywordResponse: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['Prisoner'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      last?: boolean
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Search Criteria for Global Prisoner Search */
    GlobalSearchCriteria: {
      /**
       * @description Prisoner identifier, one of prisoner number, book number, booking ID or PNC
       * @example A1234AA
       */
      prisonerIdentifier?: string
      /**
       * @description First Name
       * @example John
       */
      firstName?: string
      /**
       * @description Last Name
       * @example Smith
       */
      lastName?: string
      /**
       * @description Gender, F - Female, M - Male, NK - Not Known / Not Recorded or NS - Not Specified (Indeterminate)
       * @example M
       * @enum {string}
       */
      gender?: 'M' | 'F' | 'NK' | 'NS' | 'ALL'
      /**
       * @description Location, All or Inside or Outside
       * @example IN
       */
      location?: string
      /**
       * Format: date
       * @description Date of birth
       * @example 1970-02-28
       */
      dateOfBirth?: string
      /**
       * @description Include aliases in search
       * @default false
       * @example false
       */
      includeAliases: boolean
    }
    /** @description A request to search for prisoners by attributes */
    AttributeSearchRequest: {
      /**
       * @description The type of join to use when combining the matchers and subQueries
       * @default AND
       * @example AND
       * @enum {string}
       */
      joinType: 'AND' | 'OR'
      /** @description A list of queries of type Query that will be combined with the matchers in this query */
      queries: components['schemas']['Query'][]
      pagination: components['schemas']['PaginationRequest']
    }
    /** @description A matcher for a boolean attribute from the Prisoner record */
    BooleanMatcher: {
      type: 'BooleanMatcher'
    } & (Omit<WithRequired<components['schemas']['Matcher'], 'type'>, 'type'> & {
      /**
       * @description The attribute to match
       * @example recall
       */
      attribute: string
      /**
       * @description Whether the attribute must be true or false
       * @example true
       */
      condition: boolean
      /**
       * @description Must be Boolean
       * @example Boolean
       */
      type: string
    })
    /** @description A matcher for a date attribute from the Prisoner record.
     *
     *       For a between clause use both min value and max value. By default the range is inclusive, but can be adjusted with minInclusive and maxInclusive.
     *
     *       For <= enter only a max value, and for < set max inclusive to false.
     *
     *       For >= enter only a min value, and for > set min inclusive to false.
     *
     *       For equals enter the same date in both the min value and max value and leave min/max inclusive as true.
     *        */
    DateMatcher: {
      type: 'DateMatcher'
    } & (Omit<WithRequired<components['schemas']['Matcher'], 'type'>, 'type'> & {
      /**
       * @description The attribute to match
       * @example releaseDate
       */
      attribute: string
      /**
       * Format: date
       * @description The minimum value to match
       * @example 2024-01-01
       */
      minValue?: string
      /**
       * @description Whether the minimum value is inclusive or exclusive
       * @default true
       */
      minInclusive: boolean
      /**
       * Format: date
       * @description The maximum value to match
       * @example 2024-01-31
       */
      maxValue?: string
      /**
       * @description Whether the maximum value is inclusive or exclusive
       * @default true
       */
      maxInclusive: boolean
      /**
       * @description Must be Date
       * @example Date
       */
      type: string
    })
    /** @description A matcher for a date time attribute from the Prisoner record.
     *
     *       For a between clause use both the min and max values.
     *
     *       For < enter only the max value.
     *
     *       For > enter only the min value.
     *      */
    DateTimeMatcher: {
      type: 'DateTimeMatcher'
    } & (Omit<WithRequired<components['schemas']['Matcher'], 'type'>, 'type'> & {
      /**
       * @description The attribute to search on
       * @example currentIncentive.dateTime
       */
      attribute: string
      /**
       * Format: date-time
       * @description The minimum value to match
       * @example 2024-01-01T09:00:00Z
       */
      minValue?: string
      /**
       * Format: date-time
       * @description The maximum value to match
       * @example 2024-01-31T21:00:00Z
       */
      maxValue?: string
      /**
       * @description Must be DateTime
       * @example DateTime
       */
      type: string
    })
    /** @description A matcher for an integer attribute from the Prisoner record.
     *
     *       For a between clause use both min value and max value. By default the range is inclusive, but can be adjusted with minInclusive and maxInclusive.
     *
     *       For <= enter only a max value, and for < set max inclusive to false.
     *
     *       For >= enter only a min value, and for > set min inclusive to false.
     *
     *       For equals enter the same integer in both the min value and max value and leave min/max inclusive as true.
     *        */
    IntMatcher: {
      type: 'IntMatcher'
    } & (Omit<WithRequired<components['schemas']['Matcher'], 'type'>, 'type'> & {
      /**
       * @description The attribute to match on
       * @example heightCentimetres
       */
      attribute: string
      /**
       * Format: int32
       * @description The minimum value to match on
       * @example 150
       */
      minValue?: number
      /**
       * @description Whether the minimum value is inclusive
       * @default true
       */
      minInclusive: boolean
      /**
       * Format: int32
       * @description The maximum value to match on
       * @example 180
       */
      maxValue?: number
      /**
       * @description Whether the maximum value is inclusive
       * @default true
       */
      maxInclusive: boolean
      /**
       * @description Must be Int
       * @example Int
       */
      type: string
    })
    Matcher: {
      type: string
    }
    /** @description A matcher for PNC numbers.
     *
     *         This is required because PNC numbers come in various formats with 2/4 long years and with/without leading zeroes.
     *
     *         This matcher will find the matching PNC regardless of which format is used.
     *        */
    PncMatcher: {
      type: 'PncMatcher'
    } & (Omit<WithRequired<components['schemas']['Matcher'], 'type'>, 'type'> & {
      /**
       * @description The PNC number match
       * @example 24/123456H
       */
      pncNumber: string
      /**
       * @description Must be PNC
       * @example PNC
       */
      type: string
    })
    /** @description A query to search for prisoners by attributes */
    Query: {
      /**
       * @description The type of join to use when combining the matchers and subQueries
       * @default AND
       * @example AND
       * @enum {string}
       */
      joinType: 'AND' | 'OR'
      /** @description Matchers that will be applied to this query */
      matchers?: (
        | components['schemas']['BooleanMatcher']
        | components['schemas']['DateMatcher']
        | components['schemas']['DateTimeMatcher']
        | components['schemas']['IntMatcher']
        | components['schemas']['PncMatcher']
        | components['schemas']['StringMatcher']
      )[]
      /** @description A list of sub-queries of type Query that will be combined with the matchers in this query */
      subQueries?: components['schemas']['Query'][]
    }
    /** @description A matcher for a string attribute from the prisoner record */
    StringMatcher: {
      type: 'StringMatcher'
    } & (Omit<WithRequired<components['schemas']['Matcher'], 'type'>, 'type'> & {
      /**
       * @description The attribute to match on
       * @example aliases.lastName
       */
      attribute: string
      /**
       * @description The condition to apply to the attribute
       * @example IS
       * @enum {string}
       */
      condition: 'IS' | 'IS_NOT' | 'CONTAINS' | 'STARTSWITH' | 'IN'
      /**
       * @description The search term to apply to the attribute. Search terms are not case-sensitive.
       * @example Smith
       */
      searchTerm: string
      /**
       * @description Must be String
       * @example String
       */
      type: string
    })
    ReferenceData: {
      value: string
      label: string
    }
    ReferenceDataResponse: {
      data: components['schemas']['ReferenceData'][]
    }
    /** @description Prisoner location */
    PrisonerLocation: {
      /**
       * @description Prisoner number
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * @description Prison id. Current prison or OUT if outside. Will not be returned if no bookings.
       * @example MDI
       */
      prisonId?: string
      /**
       * @description Last prison id. If prisonId is OUT then will contain last prison, otherwise will be the same as prisonId. Will not be returned if no bookings.
       * @example MDI
       */
      lastPrisonId?: string
      /**
       * @description First Name
       * @example Robert
       */
      firstName: string
      /**
       * @description Last name
       * @example Larsen
       */
      lastName: string
    }
    /** @description Prisoner location response */
    PrisonerLocationResponse: {
      /**
       * @description Scroll id. To be kept and used in next request
       * @example FGluY2x1ZGVfY29udGV4dF91dWlkDnF1ZXJ5VGhlbkZldG...
       */
      scrollId?: string
      /** @description List of prisoner locations */
      locations?: components['schemas']['PrisonerLocation'][]
    }
    /** @description An attribute that can be searched for in a query */
    Attribute: {
      /**
       * @description The name of the attribute to be used when searching
       * @example firstName
       */
      name: string
      /**
       * @description The type of the attribute (used to determine which matcher to use)
       * @example String
       */
      type: string
      /**
       * @description Whether the attribute search will be fuzzy. Generally applicable to String attributes containing free text such as names.
       * @example true
       */
      fuzzySearch: boolean
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  findByCriteria: {
    parameters: {
      query?: {
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RestrictedPatientSearchCriteria']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PagePrisoner']
        }
      }
    }
  }
  findByReleaseDateAndPrison: {
    parameters: {
      query?: {
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReleaseDateSearch']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PagePrisoner']
        }
      }
    }
  }
  findByNumbers: {
    parameters: {
      query?: {
        /**
         * @description A list of fields to populate on the Prisoner record returned in the response. An empty list defaults to all fields.
         * @example [prisonerNumber,firstName,aliases.firstName,currentIncentive.level.code]
         */
        responseFields?: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonerNumbers']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Prisoner'][]
        }
      }
    }
  }
  findPossibleMatchesBySearchCriteria: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PossibleMatchCriteria']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Prisoner'][]
        }
      }
    }
  }
  findByCriteria_1: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonSearch']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Prisoner'][]
        }
      }
    }
  }
  findByCriteria_2: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SearchCriteria']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Prisoner'][]
        }
      }
    }
  }
  findByIds: {
    parameters: {
      query?: {
        /**
         * @description A list of fields to populate on the Prisoner record returned in the response. An empty list defaults to all fields.
         * @example [prisonerNumber,firstName,aliases.firstName,currentIncentive.level.code]
         */
        responseFields?: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BookingIds']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Prisoner'][]
        }
      }
    }
  }
  prisonerDetailSearch: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonerDetailRequest']
      }
    }
    responses: {
      /** @description Search successfully performed */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerDetailResponse']
        }
      }
      /** @description Incorrect information provided to perform prisoner match */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to search for prisoner data */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  prisonerDetailSearch_1: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PhysicalDetailRequest']
      }
    }
    responses: {
      /** @description Search successfully performed */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PhysicalDetailResponse']
        }
      }
      /** @description Incorrect information provided to perform prisoner match */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to search for prisoner data */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  matchPrisoners: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MatchRequest']
      }
    }
    responses: {
      /** @description Search successfully performed */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerMatches']
        }
      }
      /** @description Incorrect information provided to perform prisoner match */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to search for prisoner data */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  keywordSearch: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['KeywordRequest']
      }
    }
    responses: {
      /** @description Search successfully performed */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['KeywordResponse']
        }
      }
      /** @description Incorrect information provided to perform prisoner match */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to search for prisoner data */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  globalFindByCriteria: {
    parameters: {
      query?: {
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GlobalSearchCriteria']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PagePrisoner']
        }
      }
    }
  }
  attributeSearch: {
    parameters: {
      query?: {
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AttributeSearchRequest']
      }
    }
    responses: {
      /** @description Search successfully performed */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PagePrisoner']
        }
      }
      /** @description Incorrect information provided to perform an attribute search */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  responseFields: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string[]
        }
      }
    }
  }
  referenceData: {
    parameters: {
      query?: never
      header?: never
      path: {
        attribute:
          | 'build'
          | 'category'
          | 'csra'
          | 'ethnicity'
          | 'facialHair'
          | 'gender'
          | 'hairColour'
          | 'imprisonmentStatusDescription'
          | 'incentiveLevel'
          | 'inOutStatus'
          | 'leftEyeColour'
          | 'legalStatus'
          | 'marksBodyPart'
          | 'maritalStatus'
          | 'nationality'
          | 'religion'
          | 'rightEyeColour'
          | 'scarsBodyPart'
          | 'shapeOfFace'
          | 'status'
          | 'tattoosBodyPart'
          | 'title'
          | 'youthOffender'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Reference data search successfully performed */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceDataResponse']
        }
      }
      /** @description Reference data search for attribute that isn't mapped */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to retrieve reference data */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  alertsReferenceData: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Reference data search successfully performed */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceDataResponse']
        }
      }
      /** @description Reference data search for attribute that isn't mapped */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to retrieve reference data */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  findByPrisonNumber: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['Prisoner']
        }
      }
    }
  }
  findByPrison: {
    parameters: {
      query?: {
        'include-restricted-patients'?: boolean
        /**
         * @description A list of fields to populate on the Prisoner record returned in the response. An empty list defaults to all fields.
         * @example [prisonerNumber,firstName,aliases.firstName,currentIncentive.level.code]
         */
        responseFields?: string[]
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
      header?: never
      path: {
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PagePrisoner']
        }
      }
    }
  }
  scroll: {
    parameters: {
      query?: never
      header?: never
      path: {
        'scroll-id': string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerLocationResponse']
        }
      }
    }
  }
  findAll: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerLocationResponse']
        }
      }
    }
  }
  search: {
    parameters: {
      query?: {
        /**
         * @description The primary search term. Whe absent all prisoners will be returned at the prison
         * @example john smith
         */
        term?: string
        /**
         * @description alert codes to filter by. Zero or more can be supplied. When multiple supplied the filter is effectively and OR
         * @example XTACT
         */
        alerts?: string[]
        /**
         * @description Offenders with a DOB >= this date
         * @example 1970-01-02
         */
        fromDob?: string
        /**
         * @description Offenders with a DOB <= this date
         * @example 1975-01-02
         */
        toDob?: string
        /**
         * @description Filter for the prisoners cell location. A block wing or cell can be specified. With prison id can be included or absent so HEI-3-1 and 3-1 are equivalent when the prison id is HEI
         * @example 3-1
         */
        cellLocationPrefix?: string
        /**
         * @description Filter for the prisoners on an incentive level.
         * @example STD
         */
        incentiveLevelCode?: string
        /**
         * @description A list of fields to populate on the Prisoner record returned in the response. An empty list defaults to all fields.
         * @example [prisonerNumber,firstName,aliases.firstName,currentIncentive.level.code]
         */
        responseFields?: string[]
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
      header?: never
      path: {
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Search successfully performed */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PagePrisoner']
        }
      }
      /** @description Incorrect information provided to perform prisoner match */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to search for prisoner data */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAttributes: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Search successfully performed */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Attribute'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
type WithRequired<T, K extends keyof T> = T & {
  [P in K]-?: T[P]
}
